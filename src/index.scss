/*
  Override SASS' handling of HSL(a) color functions, don't touch it and let CSS handle it itself.
  This will enable the trick with variable alpha channels for CSS color variables (see below).
*/
/*
  Function for defining (not only) vertical rhythm by multiplies of 12px
    Examples:
    width: size(2); (equals to "width: 24px;")
    line-height: size(3); (equals to "line-height: 36px;")
*/
/*
  Responsivity mixin for custom min-width styles
    Examples:
    @include break-from(450px) { ... }
*/
:root {
  --radius: 4px;
  --main-content-gutter: 24px;
}
@media only screen and (min-width: 769px) {
  :root {
    --main-content-gutter: 36px;
  }
}
@media only screen and (min-width: 1216px) {
  :root {
    --main-content-gutter: 48px;
  }
}

/*
  Usage:
  @extend %box-shadow;
*/
.control-bar {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.04), 0px 3px 4px rgba(0, 0, 0, 0.1);
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.24), 0px 3px 4px rgba(0, 0, 0, 0.2);
}

.button,
.button .icon,
.button .text,
label,
input,
textarea,
select,
.picker-with-search ul.items label,
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  transition: all 0.1s;
}

/*
  Self-hosted fonts
*/
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Regular.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Regular.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Medium.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Medium.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 600;
  font-display: swap;
  src: url("/fonts/Inter/Inter-SemiBold.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-SemiBold.woff?v=3.18") format("woff");
}

/* -------------------------------------------------------
Variable font.
Usage:

  body {
    font-family: 'Inter', sans-serif; // use regular Inter font by default..
    @supports (font-variation-settings: normal) {
      font-family: 'Inter var', sans-serif; // ..but if supported, use variable Inter font instead (all-in-one)
    }
  }

*/
@font-face {
  font-family: "Inter var";
  font-weight: 100 900;
  font-display: swap;
  font-style: normal;
  font-named-instance: "Regular";
  src: url("/fonts/Inter/Inter-roman.var.woff2?v=3.18") format("woff2");
}

html {
  box-sizing: border-box;
}

body {
  box-sizing: border-box;
  background: var(--bg);
  margin: 0;
  padding: 0;
  font-family: "Inter", sans-serif;
}
@supports (font-variation-settings: normal) {
  body {
    font-family: "Inter var", sans-serif;
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 600;
  color: var(--text);
}

p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
}

b,
strong {
  font-weight: 500;
}

a {
  text-decoration: none;
}

hr {
  border: none;
  border-top: 1px solid var(--bg-muted);
  margin: 24px 0;
}
.--padded hr {
  margin: 24px -24px;
}
hr.--thick {
  border-width: 3px;
}

.block .block-header .icon {
  opacity: 0.4;
}

.block .block-header h1 {
  line-height: 36px;
  font-size: 16px;
  margin: 0 0 0 12px;
}

.block .body .--padded {
  padding: 24px 24px;
  display: block;
}

/*
  ----- BUTTONS -----

  a) <ButtonField text="xxx" action="xxx" type="neutral"></ButtonField>
  b) <input type="submit" class="input alert button" value="xxx">
  c) <a class="neutral button"><span class="text">xxx</span></a>
*/
.button {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 36px;
  background: var(--hub);
  border: 0;
  border-bottom: 2px solid var(--hub-darker);
  border-radius: var(--radius);
  cursor: pointer;
  outline: none;
  padding: 0 15px;
  color: var(--bg-white);
  font-weight: 600;
  font-size: 14px;
}
.button .icon {
  display: flex;
  opacity: 0.5;
  position: relative;
}
.button .icon + .text {
  margin-left: 10px;
}
.button .text {
  color: var(--card);
  position: relative;
}
.button.active {
  box-shadow: 0 3px 1px hsla(var(--text-hsl), 0.4) inset;
}
.button:hover,
.button.active {
  background: var(--hub-darker);
  text-decoration: none;
}
.button:hover .icon,
.button.active .icon {
  top: 1px;
}
.button:hover .text,
.button.active .text {
  top: 1px;
}
.button:hover.input,
.button.active.input {
  padding-top: 2px;
}
.button:focus {
  box-shadow: 0 0 0 4px hsla(var(--hub-hsl), 0.25);
}
.button.input {
  width: auto;
}
.button.success {
  background: var(--success);
  border-color: var(--success-darker);
}
.button.success:hover,
.button.success.active {
  background: var(--success-darker);
}
.button.success:focus {
  box-shadow: 0 0 0 4px hsla(var(--success-darker-hsl), 0.25);
}
.button.alert {
  background: var(--alert);
  border-color: var(--alert-darker);
}
.button.alert:hover,
.button.alert.active {
  background: var(--alert-darker);
}
.button.alert:focus {
  box-shadow: 0 0 0 4px hsla(var(--alert-darker-hsl), 0.25);
}
.button.neutral {
  --neutral-darker: hsl(0, 3%, 48%);
  --neutral-darker-hsl: 0, 3%, 48%;
  background: var(--text-light);
  border-color: var(--neutral-darker);
}
.button.neutral.active {
  background: var(--neutral-darker);
}
.button.neutral:hover {
  background: var(--neutral-darker);
  box-shadow: none;
}
.button.neutral:focus {
  box-shadow: 0 0 0 4px hsla(var(--neutral-darker-hsl), 0.25);
}
.button.outlined {
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  background: transparent;
  font-weight: 500;
  font-size: 14px;
  color: var(--text-muted);
  line-height: 36px;
  display: flex;
  height: 36px;
  padding: 0 11px;
}
.button.outlined .text {
  color: var(--text-muted);
}
.button.outlined.active {
  box-shadow: none;
  background: hsla(var(--text-light-hsl), 0.2);
}
.button.outlined:hover,
.button.outlined.active {
  border-color: var(--text-light);
}
.button.outlined:hover .icon,
.button.outlined.active .icon {
  top: 0;
}
.button.outlined:hover .text,
.button.outlined.active .text {
  top: 0;
}
.button.outlined:focus {
  box-shadow: 0 0 0 4px hsla(var(--bg-muted-hsl), 0.5);
}
.button.transparent {
  opacity: 0.3;
}

/*
  ----- FORMS -----

  <label>
    Label title
    <input type="text">
  </label>
*/
label {
  font-size: 12px;
  line-height: 36px;
  color: var(--text-light);
  text-transform: uppercase;
  cursor: pointer;
}
label:hover {
  color: var(--text-muted);
}
label:focus-within {
  color: var(--hub);
  font-weight: 560;
}
label.toggle-button {
  display: flex;
  text-transform: none;
  line-height: 24px;
  margin: 12px 0;
}
label.toggle-button:focus-within {
  font-weight: inherit;
}
label.toggle-button SliderField {
  flex: auto;
  margin: 4px 18px 0 0;
}
label.toggle-button .text {
  flex: 1 1 100%;
  color: var(--text-muted);
}
label.toggle-button .text strong {
  font-size: 15px;
  color: var(--text);
  display: block;
}
label.toggle-button .text small {
  font-size: 13px;
}

input,
textarea,
select {
  box-sizing: border-box;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  outline: none;
  width: 100%;
  padding: 12px 24px;
  margin-bottom: 12px;
  font-size: 15px;
  color: var(--text);
  line-height: 24px;
}
input[type="checkbox"],
textarea[type="checkbox"],
select[type="checkbox"] {
  width: auto;
}
input:not(.button)[disabled],
input:not(.button)[readonly],
textarea:not(.button)[disabled],
textarea:not(.button)[readonly],
select:not(.button)[disabled],
select:not(.button)[readonly] {
  color: var(--text-muted);
}
input:not(.button):hover,
textarea:not(.button):hover,
select:not(.button):hover {
  border: 1px solid var(--text-light);
}
input:not(.button):focus,
textarea:not(.button):focus,
select:not(.button):focus {
  border: 1px solid var(--hub);
  box-shadow: 0px 0px 0px 3px hsla(var(--hub-hsl), 0.2);
}

.table-header {
  font-size: 12px;
  line-height: 24px;
  color: var(--text-light);
  text-transform: uppercase;
}

.howto-link:hover,
.howto-link:focus {
  text-decoration: underline;
}

.howto-link::after {
  content: " ->";
}

.grid-container {
  --columns: 1;
  --gapH: 12px;
  --gapV: 0;
  display: grid;
  column-gap: var(--gapH);
  row-gap: var(--gapV);
  grid-template-columns: repeat(var(--columns), 1fr);
}
@media only screen and (min-width: 769px) {
  .grid-container {
    --gapH: 24px;
  }
}
.grid-container.--two-columns {
  --gapH: 24px;
}
@media only screen and (min-width: 1216px) {
  .grid-container.--two-columns {
    --columns: 2;
  }
}
@media only screen and (min-width: 769px) {
  .grid-container.--four-columns {
    --columns: 2;
    --gapV: 24px;
  }
}
@media only screen and (min-width: 1216px) {
  .grid-container.--four-columns {
    --columns: 4;
  }
}

.control-bar {
  background-color: var(--card-muted);
  margin: 0 calc(-1 * var(--main-content-gutter)) 24px;
  padding: 0;
}
@media only screen and (min-width: 1216px) {
  .control-bar {
    padding: 0 var(--main-content-gutter);
    display: flex;
  }
}
.control-bar .filtering,
.control-bar .sorting {
  display: flex;
  flex-direction: column;
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering,
  .control-bar .sorting {
    flex-direction: row;
    flex-wrap: wrap;
  }
}
.control-bar .filtering > *,
.control-bar .sorting > * {
  border-bottom: 1px solid var(--bg-muted);
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 50%;
  }
}
@media only screen and (min-width: 1000px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 33.3%;
  }
}
@media only screen and (min-width: 1150px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 25%;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    border: 0;
  }
}
@media only screen and (min-width: 1400px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 0 1 200px;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering {
    flex: 1 1;
    align-self: flex-start;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > * {
    border-right: 1px solid var(--bg-muted);
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting {
    flex: 0 1;
    align-self: center;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting > * {
    border-left: 1px solid var(--bg-muted);
  }
}

.picker-with-search {
  --list-height: 320px;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
}
.picker-with-search .search {
  border-bottom: 1px solid var(--bg-muted);
  display: flex;
  align-items: center;
  padding: 0 0 0 24px;
}
.picker-with-search .search input {
  border: none;
  margin: 0;
  box-shadow: none;
}
.picker-with-search .search:focus-within .icon * {
  fill: var(--hub);
}
.picker-with-search ul.items {
  padding: 6px;
  margin: 0;
  list-style: none;
  font-size: 13px;
  max-height: var(--list-height);
  overflow: auto;
}
.picker-with-search ul.items label {
  line-height: 24px;
  text-transform: none;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding: 6px 18px;
  margin: 2px 0;
  border-radius: var(--radius);
  cursor: pointer;
}
.picker-with-search ul.items label:hover {
  background: var(--card-muted);
}
.picker-with-search ul.items label.selected {
  background: hsla(var(--hub-hsl), 0.1);
}
.picker-with-search ul.items label.selected .name,
.picker-with-search ul.items label.selected .meta {
  color: var(--hub);
}
.picker-with-search ul.items label.selected:hover {
  background: hsla(var(--hub-hsl), 0.15);
}
.picker-with-search ul.items label .checkbox {
  width: auto;
  padding: 0;
  margin: 0;
  flex: 0;
}
.picker-with-search ul.items label .checkbox[disabled] ~ .name {
  color: var(--text-muted);
}
.picker-with-search ul.items label .checkbox[disabled] ~ .meta {
  color: var(--text-light);
}
.picker-with-search ul.items label .icon {
  margin-left: 18px;
}
.picker-with-search ul.items label .name {
  margin: 0 24px 0 12px;
  flex: 1 1;
  color: var(--text);
  font-weight: 600;
}
.picker-with-search ul.items label .meta {
  font-weight: 400;
  color: var(--text-muted);
}

section.not-found {
  width: 100%;
  border: 2px dashed var(--bg-muted);
  padding: 48px 24px;
  text-align: center;
}
section.not-found .center {
  display: flex;
  flex-direction: column;
  align-items: center;
}
section.not-found h1 {
  font-size: 18px;
  line-height: 36px;
  margin: 0;
}
section.not-found p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
  margin: 12px auto 24px;
  max-width: 33rem;
}

.mat-datepicker-content {
  translate: -54px 6px;
}

ngxgeo-autocomplete #search_places {
  background: var(--card);
  border: 1px solid var(--bg-muted);
  padding: 14px 25px;
  outline: none;
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  background: var(--card) !important;
  border-radius: var(--radius);
  border: none !important;
  font-weight: 400;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown ul {
  padding: 0 7px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .currentlocation a {
  box-sizing: border-box;
  padding: 6px 24px !important;
  text-transform: capitalize;
  letter-spacing: 0;
  font-size: 13px !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  text-transform: none;
  padding: 6px 24px !important;
  box-sizing: border-box;
  line-height: 24px;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a:hover,
ngxgeo-autocomplete .custom-autocomplete__dropdown a:focus {
  background: var(--card-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .main-text {
  font-weight: 500 !important;
  font-size: 13px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .secondary_text {
  color: var(--text-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active {
  background-color: var(--card-muted) !important;
  color: var(--text-muted) !important;
  display: flex;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active a {
  background: transparent !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active .secondary_text {
  color: var(--text-muted) !important;
}

ngxgeo-autocomplete .heading {
  padding: 0 0 0 24px !important;
  box-sizing: border-box;
  overflow: hidden;
}
ngxgeo-autocomplete .heading .line-recent {
  left: 170px !important;
  top: 17px !important;
  width: calc(100% - 170px) !important;
}
ngxgeo-autocomplete .heading .line-location {
  left: 116px !important;
  top: 18px !important;
  width: calc(100% - 116px) !important;
}

ngxgeo-autocomplete
  .custom-autocomplete__dropdown
  .currentlocation
  .location-icon,
ngxgeo-autocomplete .custom-autocomplete__dropdown .custom-icon {
  display: none !important;
}

.debug-responsivity .size {
  position: fixed;
  bottom: 0;
  left: 0;
  z-index: 100;
  background: var(--text);
  color: var(--bg);
  font-size: 0.6em;
  font-weight: 600;
  padding: 0 3px;
  display: none;
}

.debug-responsivity .none {
  display: inline-block;
}

@media only screen and (min-width: 769px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .t {
    display: inline-block;
  }
}

@media only screen and (min-width: 1024px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .d {
    display: inline-block;
  }
}

@media only screen and (min-width: 1216px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .w {
    display: inline-block;
  }
}

@media only screen and (min-width: 1408px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .f {
    display: inline-block;
  }
}

.show-grid {
  background-image: linear-gradient(
    to bottom,
    #0ff 0px,
    rgba(255, 255, 255, 0) 1px
  );
  background-repeat: repeat-y;
  background-size: 100% 12px;
}

.sidebar {
  box-sizing: border-box;
  width: 280px;
  padding: 24px 24px 36px;
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.1);
  background: var(--card);
  position: absolute;
  top: 0;
  bottom: 0;
  z-index: 9999;
}
.sidebar.closed {
  display: none;
}
@media only screen and (min-width: 800px) {
  .sidebar {
    position: static;
    flex: 0 0 280px;
    z-index: 1;
  }
  .sidebar.closed {
    display: block;
  }
}

.sidebar-panel {
  min-height: 100vh;
}
.sidebar-panel .hamburger {
  display: block;
  padding-bottom: 10px;
  position: relative;
  top: -12px;
}
@media only screen and (min-width: 800px) {
  .sidebar-panel .hamburger {
    display: none;
  }
}
.sidebar-panel .hamburger label {
  display: flex;
  flex-direction: column;
  width: 30px;
  cursor: pointer;
  justify-content: center;
}
.sidebar-panel .hamburger label span {
  background: var(--hub);
  border-radius: 10px;
  height: 3px;
  margin: 3px 0;
  transition: 0.4s cubic-bezier(0.68, -0.6, 0.32, 1.6);
}
.sidebar-panel .hamburger label span:nth-of-type(1) {
  width: 50%;
}
.sidebar-panel .hamburger label span:nth-of-type(2) {
  width: 100%;
}
.sidebar-panel .hamburger label span:nth-of-type(3) {
  width: 75%;
}
.sidebar-panel .hamburger input[type="checkbox"] {
  display: none;
}
.sidebar-panel .brand-logo {
  display: flex;
  justify-content: flex-start;
  align-items: center;
}
.sidebar-panel .brand-logo img {
  margin-right: 10px;
}
.sidebar-panel .brand-logo .name {
  color: var(--text);
  font-weight: 600;
  font-size: 18px;
}
.sidebar-panel .brand-logo .name .version {
  color: var(--text-light);
  font-size: 10px;
  font-weight: 400;
  margin-left: 5px;
}

/*
  Override SASS' handling of HSL(a) color functions, don't touch it and let CSS handle it itself.
  This will enable the trick with variable alpha channels for CSS color variables (see below).
*/
/*
  Function for defining (not only) vertical rhythm by multiplies of 12px
    Examples:
    width: size(2); (equals to "width: 24px;")
    line-height: size(3); (equals to "line-height: 36px;")
*/
/*
  Responsivity mixin for custom min-width styles
    Examples:
    @include break-from(450px) { ... }
*/
:root {
  --radius: 4px;
  --main-content-gutter: 24px;
}
@media only screen and (min-width: 769px) {
  :root {
    --main-content-gutter: 36px;
  }
}
@media only screen and (min-width: 1216px) {
  :root {
    --main-content-gutter: 48px;
  }
}

/*
  Usage:
  @extend %box-shadow;
*/
.control-bar {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.04), 0px 3px 4px rgba(0, 0, 0, 0.1);
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.24), 0px 3px 4px rgba(0, 0, 0, 0.2);
}

.button,
.button .icon,
.button .text,
label,
input,
textarea,
select,
.picker-with-search ul.items label,
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  transition: all 0.1s;
}

/*
  Self-hosted fonts
*/
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Regular.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Regular.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Medium.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Medium.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 600;
  font-display: swap;
  src: url("/fonts/Inter/Inter-SemiBold.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-SemiBold.woff?v=3.18") format("woff");
}

/* -------------------------------------------------------
Variable font.
Usage:

  body {
    font-family: 'Inter', sans-serif; // use regular Inter font by default..
    @supports (font-variation-settings: normal) {
      font-family: 'Inter var', sans-serif; // ..but if supported, use variable Inter font instead (all-in-one)
    }
  }

*/
@font-face {
  font-family: "Inter var";
  font-weight: 100 900;
  font-display: swap;
  font-style: normal;
  font-named-instance: "Regular";
  src: url("/fonts/Inter/Inter-roman.var.woff2?v=3.18") format("woff2");
}

html {
  box-sizing: border-box;
}

body {
  box-sizing: border-box;
  background: var(--bg);
  margin: 0;
  padding: 0;
  font-family: "Inter", sans-serif;
}
@supports (font-variation-settings: normal) {
  body {
    font-family: "Inter var", sans-serif;
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 600;
  color: var(--text);
}

p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
}

b,
strong {
  font-weight: 500;
}

a {
  text-decoration: none;
}

hr {
  border: none;
  border-top: 1px solid var(--bg-muted);
  margin: 24px 0;
}
.--padded hr {
  margin: 24px -24px;
}
hr.--thick {
  border-width: 3px;
}

.block .block-header .icon {
  opacity: 0.4;
}

.block .block-header h1 {
  line-height: 36px;
  font-size: 16px;
  margin: 0 0 0 12px;
}

.block .body .--padded {
  padding: 24px 24px;
  display: block;
}

/*
  ----- BUTTONS -----

  a) <ButtonField text="xxx" action="xxx" type="neutral"></ButtonField>
  b) <input type="submit" class="input alert button" value="xxx">
  c) <a class="neutral button"><span class="text">xxx</span></a>
*/
.button {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 36px;
  background: var(--hub);
  border: 0;
  border-bottom: 2px solid var(--hub-darker);
  border-radius: var(--radius);
  cursor: pointer;
  outline: none;
  padding: 0 15px;
  color: var(--bg-white);
  font-weight: 600;
  font-size: 14px;
}
.button .icon {
  display: flex;
  opacity: 0.5;
  position: relative;
}
.button .icon + .text {
  margin-left: 10px;
}
.button .text {
  color: var(--card);
  position: relative;
}
.button.active {
  box-shadow: 0 3px 1px hsla(var(--text-hsl), 0.4) inset;
}
.button:hover,
.button.active {
  background: var(--hub-darker);
  text-decoration: none;
}
.button:hover .icon,
.button.active .icon {
  top: 1px;
}
.button:hover .text,
.button.active .text {
  top: 1px;
}
.button:hover.input,
.button.active.input {
  padding-top: 2px;
}
.button:focus {
  box-shadow: 0 0 0 4px hsla(var(--hub-hsl), 0.25);
}
.button.input {
  width: auto;
}
.button.success {
  background: var(--success);
  border-color: var(--success-darker);
}
.button.success:hover,
.button.success.active {
  background: var(--success-darker);
}
.button.success:focus {
  box-shadow: 0 0 0 4px hsla(var(--success-darker-hsl), 0.25);
}
.button.alert {
  background: var(--alert);
  border-color: var(--alert-darker);
}
.button.alert:hover,
.button.alert.active {
  background: var(--alert-darker);
}
.button.alert:focus {
  box-shadow: 0 0 0 4px hsla(var(--alert-darker-hsl), 0.25);
}
.button.neutral {
  --neutral-darker: hsl(0, 3%, 48%);
  --neutral-darker-hsl: 0, 3%, 48%;
  background: var(--text-light);
  border-color: var(--neutral-darker);
}
.button.neutral.active {
  background: var(--neutral-darker);
}
.button.neutral:hover {
  background: var(--neutral-darker);
  box-shadow: none;
}
.button.neutral:focus {
  box-shadow: 0 0 0 4px hsla(var(--neutral-darker-hsl), 0.25);
}
.button.outlined {
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  background: transparent;
  font-weight: 500;
  font-size: 14px;
  color: var(--text-muted);
  line-height: 36px;
  display: flex;
  height: 36px;
  padding: 0 11px;
}
.button.outlined .text {
  color: var(--text-muted);
}
.button.outlined.active {
  box-shadow: none;
  background: hsla(var(--text-light-hsl), 0.2);
}
.button.outlined:hover,
.button.outlined.active {
  border-color: var(--text-light);
}
.button.outlined:hover .icon,
.button.outlined.active .icon {
  top: 0;
}
.button.outlined:hover .text,
.button.outlined.active .text {
  top: 0;
}
.button.outlined:focus {
  box-shadow: 0 0 0 4px hsla(var(--bg-muted-hsl), 0.5);
}
.button.transparent {
  opacity: 0.3;
}

/*
  ----- FORMS -----

  <label>
    Label title
    <input type="text">
  </label>
*/
label {
  font-size: 12px;
  line-height: 36px;
  color: var(--text-light);
  text-transform: uppercase;
  cursor: pointer;
}
label:hover {
  color: var(--text-muted);
}
label:focus-within {
  color: var(--hub);
  font-weight: 560;
}
label.toggle-button {
  display: flex;
  text-transform: none;
  line-height: 24px;
  margin: 12px 0;
}
label.toggle-button:focus-within {
  font-weight: inherit;
}
label.toggle-button SliderField {
  flex: auto;
  margin: 4px 18px 0 0;
}
label.toggle-button .text {
  flex: 1 1 100%;
  color: var(--text-muted);
}
label.toggle-button .text strong {
  font-size: 15px;
  color: var(--text);
  display: block;
}
label.toggle-button .text small {
  font-size: 13px;
}

input,
textarea,
select {
  box-sizing: border-box;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  outline: none;
  width: 100%;
  padding: 12px 24px;
  margin-bottom: 12px;
  font-size: 15px;
  color: var(--text);
  line-height: 24px;
}
input[type="checkbox"],
textarea[type="checkbox"],
select[type="checkbox"] {
  width: auto;
}
input:not(.button)[disabled],
input:not(.button)[readonly],
textarea:not(.button)[disabled],
textarea:not(.button)[readonly],
select:not(.button)[disabled],
select:not(.button)[readonly] {
  color: var(--text-muted);
}
input:not(.button):hover,
textarea:not(.button):hover,
select:not(.button):hover {
  border: 1px solid var(--text-light);
}
input:not(.button):focus,
textarea:not(.button):focus,
select:not(.button):focus {
  border: 1px solid var(--hub);
  box-shadow: 0px 0px 0px 3px hsla(var(--hub-hsl), 0.2);
}

.table-header {
  font-size: 12px;
  line-height: 24px;
  color: var(--text-light);
  text-transform: uppercase;
}

.howto-link:hover,
.howto-link:focus {
  text-decoration: underline;
}

.howto-link::after {
  content: " ->";
}

.grid-container {
  --columns: 1;
  --gapH: 12px;
  --gapV: 0;
  display: grid;
  column-gap: var(--gapH);
  row-gap: var(--gapV);
  grid-template-columns: repeat(var(--columns), 1fr);
}
@media only screen and (min-width: 769px) {
  .grid-container {
    --gapH: 24px;
  }
}
.grid-container.--two-columns {
  --gapH: 24px;
}
@media only screen and (min-width: 1216px) {
  .grid-container.--two-columns {
    --columns: 2;
  }
}
@media only screen and (min-width: 769px) {
  .grid-container.--four-columns {
    --columns: 2;
    --gapV: 24px;
  }
}
@media only screen and (min-width: 1216px) {
  .grid-container.--four-columns {
    --columns: 4;
  }
}

.control-bar {
  background-color: var(--card-muted);
  margin: 0 calc(-1 * var(--main-content-gutter)) 24px;
  padding: 0;
}
@media only screen and (min-width: 1216px) {
  .control-bar {
    padding: 0 var(--main-content-gutter);
    display: flex;
  }
}
.control-bar .filtering,
.control-bar .sorting {
  display: flex;
  flex-direction: column;
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering,
  .control-bar .sorting {
    flex-direction: row;
    flex-wrap: wrap;
  }
}
.control-bar .filtering > *,
.control-bar .sorting > * {
  border-bottom: 1px solid var(--bg-muted);
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 50%;
  }
}
@media only screen and (min-width: 1000px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 33.3%;
  }
}
@media only screen and (min-width: 1150px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 25%;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    border: 0;
  }
}
@media only screen and (min-width: 1400px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 0 1 200px;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering {
    flex: 1 1;
    align-self: flex-start;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > * {
    border-right: 1px solid var(--bg-muted);
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting {
    flex: 0 1;
    align-self: center;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting > * {
    border-left: 1px solid var(--bg-muted);
  }
}

.picker-with-search {
  --list-height: 320px;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
}
.picker-with-search .search {
  border-bottom: 1px solid var(--bg-muted);
  display: flex;
  align-items: center;
  padding: 0 0 0 24px;
}
.picker-with-search .search input {
  border: none;
  margin: 0;
  box-shadow: none;
}
.picker-with-search .search:focus-within .icon * {
  fill: var(--hub);
}
.picker-with-search ul.items {
  padding: 6px;
  margin: 0;
  list-style: none;
  font-size: 13px;
  max-height: var(--list-height);
  overflow: auto;
}
.picker-with-search ul.items label {
  line-height: 24px;
  text-transform: none;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding: 6px 18px;
  margin: 2px 0;
  border-radius: var(--radius);
  cursor: pointer;
}
.picker-with-search ul.items label:hover {
  background: var(--card-muted);
}
.picker-with-search ul.items label.selected {
  background: hsla(var(--hub-hsl), 0.1);
}
.picker-with-search ul.items label.selected .name,
.picker-with-search ul.items label.selected .meta {
  color: var(--hub);
}
.picker-with-search ul.items label.selected:hover {
  background: hsla(var(--hub-hsl), 0.15);
}
.picker-with-search ul.items label .checkbox {
  width: auto;
  padding: 0;
  margin: 0;
  flex: 0;
}
.picker-with-search ul.items label .checkbox[disabled] ~ .name {
  color: var(--text-muted);
}
.picker-with-search ul.items label .checkbox[disabled] ~ .meta {
  color: var(--text-light);
}
.picker-with-search ul.items label .icon {
  margin-left: 18px;
}
.picker-with-search ul.items label .name {
  margin: 0 24px 0 12px;
  flex: 1 1;
  color: var(--text);
  font-weight: 600;
}
.picker-with-search ul.items label .meta {
  font-weight: 400;
  color: var(--text-muted);
}

section.not-found {
  width: 100%;
  border: 2px dashed var(--bg-muted);
  padding: 48px 24px;
  text-align: center;
}
section.not-found .center {
  display: flex;
  flex-direction: column;
  align-items: center;
}
section.not-found h1 {
  font-size: 18px;
  line-height: 36px;
  margin: 0;
}
section.not-found p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
  margin: 12px auto 24px;
  max-width: 33rem;
}

.mat-datepicker-content {
  translate: -54px 6px;
}

ngxgeo-autocomplete #search_places {
  background: var(--card);
  border: 1px solid var(--bg-muted);
  padding: 14px 25px;
  outline: none;
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  background: var(--card) !important;
  border-radius: var(--radius);
  border: none !important;
  font-weight: 400;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown ul {
  padding: 0 7px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .currentlocation a {
  box-sizing: border-box;
  padding: 6px 24px !important;
  text-transform: capitalize;
  letter-spacing: 0;
  font-size: 13px !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  text-transform: none;
  padding: 6px 24px !important;
  box-sizing: border-box;
  line-height: 24px;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a:hover,
ngxgeo-autocomplete .custom-autocomplete__dropdown a:focus {
  background: var(--card-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .main-text {
  font-weight: 500 !important;
  font-size: 13px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .secondary_text {
  color: var(--text-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active {
  background-color: var(--card-muted) !important;
  color: var(--text-muted) !important;
  display: flex;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active a {
  background: transparent !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active .secondary_text {
  color: var(--text-muted) !important;
}

ngxgeo-autocomplete .heading {
  padding: 0 0 0 24px !important;
  box-sizing: border-box;
  overflow: hidden;
}
ngxgeo-autocomplete .heading .line-recent {
  left: 170px !important;
  top: 17px !important;
  width: calc(100% - 170px) !important;
}
ngxgeo-autocomplete .heading .line-location {
  left: 116px !important;
  top: 18px !important;
  width: calc(100% - 116px) !important;
}

ngxgeo-autocomplete
  .custom-autocomplete__dropdown
  .currentlocation
  .location-icon,
ngxgeo-autocomplete .custom-autocomplete__dropdown .custom-icon {
  display: none !important;
}

.debug-responsivity .size {
  position: fixed;
  bottom: 0;
  left: 0;
  z-index: 100;
  background: var(--text);
  color: var(--bg);
  font-size: 0.6em;
  font-weight: 600;
  padding: 0 3px;
  display: none;
}

.debug-responsivity .none {
  display: inline-block;
}

@media only screen and (min-width: 769px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .t {
    display: inline-block;
  }
}

@media only screen and (min-width: 1024px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .d {
    display: inline-block;
  }
}

@media only screen and (min-width: 1216px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .w {
    display: inline-block;
  }
}

@media only screen and (min-width: 1408px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .f {
    display: inline-block;
  }
}

.show-grid {
  background-image: linear-gradient(
    to bottom,
    #0ff 0px,
    rgba(255, 255, 255, 0) 1px
  );
  background-repeat: repeat-y;
  background-size: 100% 12px;
}

/*
  ----- BUTTONS -----

  a) <ButtonField text="xxx" action="xxx" type="neutral"></ButtonField>
  b) <input type="submit" class="input alert button" value="xxx">
  c) <a class="neutral button"><span class="text">xxx</span></a>
*/
.button {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 36px;
  background: var(--hub);
  border: 0;
  border-bottom: 2px solid var(--hub-darker);
  border-radius: var(--radius);
  cursor: pointer;
  outline: none;
  padding: 0 15px;
  color: var(--bg-white);
  font-weight: 600;
  font-size: 14px;
}
.button .icon {
  display: flex;
  opacity: 0.5;
  position: relative;
}
.button .icon + .text {
  margin-left: 10px;
}
.button .text {
  color: var(--card);
  position: relative;
}
.button.active {
  box-shadow: 0 3px 1px hsla(var(--text-hsl), 0.4) inset;
}
.button:hover,
.button.active {
  background: var(--hub-darker);
  text-decoration: none;
}
.button:hover .icon,
.button.active .icon {
  top: 1px;
}
.button:hover .text,
.button.active .text {
  top: 1px;
}
.button:hover.input,
.button.active.input {
  padding-top: 2px;
}
.button:focus {
  box-shadow: 0 0 0 4px hsla(var(--hub-hsl), 0.25);
}
.button.input {
  width: auto;
}
.button.success {
  background: var(--success);
  border-color: var(--success-darker);
}
.button.success:hover,
.button.success.active {
  background: var(--success-darker);
}
.button.success:focus {
  box-shadow: 0 0 0 4px hsla(var(--success-darker-hsl), 0.25);
}
.button.alert {
  background: var(--alert);
  border-color: var(--alert-darker);
}
.button.alert:hover,
.button.alert.active {
  background: var(--alert-darker);
}
.button.alert:focus {
  box-shadow: 0 0 0 4px hsla(var(--alert-darker-hsl), 0.25);
}
.button.neutral {
  --neutral-darker: hsl(0, 3%, 48%);
  --neutral-darker-hsl: 0, 3%, 48%;
  background: var(--text-light);
  border-color: var(--neutral-darker);
}
.button.neutral.active {
  background: var(--neutral-darker);
}
.button.neutral:hover {
  background: var(--neutral-darker);
  box-shadow: none;
}
.button.neutral:focus {
  box-shadow: 0 0 0 4px hsla(var(--neutral-darker-hsl), 0.25);
}
.button.outlined {
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  background: transparent;
  font-weight: 500;
  font-size: 14px;
  color: var(--text-muted);
  line-height: 36px;
  display: flex;
  height: 36px;
  padding: 0 11px;
}
.button.outlined .text {
  color: var(--text-muted);
}
.button.outlined.active {
  box-shadow: none;
  background: hsla(var(--text-light-hsl), 0.2);
}
.button.outlined:hover,
.button.outlined.active {
  border-color: var(--text-light);
}
.button.outlined:hover .icon,
.button.outlined.active .icon {
  top: 0;
}
.button.outlined:hover .text,
.button.outlined.active .text {
  top: 0;
}
.button.outlined:focus {
  box-shadow: 0 0 0 4px hsla(var(--bg-muted-hsl), 0.5);
}
.button.transparent {
  opacity: 0.3;
}

/*
  Override SASS' handling of HSL(a) color functions, don't touch it and let CSS handle it itself.
  This will enable the trick with variable alpha channels for CSS color variables (see below).
*/
/*
  Function for defining (not only) vertical rhythm by multiplies of 12px
    Examples:
    width: size(2); (equals to "width: 24px;")
    line-height: size(3); (equals to "line-height: 36px;")
*/
/*
  Responsivity mixin for custom min-width styles
    Examples:
    @include break-from(450px) { ... }
*/
:root {
  --radius: 4px;
  --main-content-gutter: 24px;
}
@media only screen and (min-width: 769px) {
  :root {
    --main-content-gutter: 36px;
  }
}
@media only screen and (min-width: 1216px) {
  :root {
    --main-content-gutter: 48px;
  }
}

/*
  Usage:
  @extend %box-shadow;
*/
.control-bar {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.04), 0px 3px 4px rgba(0, 0, 0, 0.1);
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.24), 0px 3px 4px rgba(0, 0, 0, 0.2);
}

.button,
.button .icon,
.button .text,
label,
input,
textarea,
select,
.picker-with-search ul.items label,
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  transition: all 0.1s;
}

/*
  Self-hosted fonts
*/
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Regular.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Regular.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Medium.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Medium.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 600;
  font-display: swap;
  src: url("/fonts/Inter/Inter-SemiBold.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-SemiBold.woff?v=3.18") format("woff");
}

/* -------------------------------------------------------
Variable font.
Usage:

  body {
    font-family: 'Inter', sans-serif; // use regular Inter font by default..
    @supports (font-variation-settings: normal) {
      font-family: 'Inter var', sans-serif; // ..but if supported, use variable Inter font instead (all-in-one)
    }
  }

*/
@font-face {
  font-family: "Inter var";
  font-weight: 100 900;
  font-display: swap;
  font-style: normal;
  font-named-instance: "Regular";
  src: url("/fonts/Inter/Inter-roman.var.woff2?v=3.18") format("woff2");
}

html {
  box-sizing: border-box;
}

body {
  box-sizing: border-box;
  background: var(--bg);
  margin: 0;
  padding: 0;
  font-family: "Inter", sans-serif;
}
@supports (font-variation-settings: normal) {
  body {
    font-family: "Inter var", sans-serif;
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 600;
  color: var(--text);
}

p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
}

b,
strong {
  font-weight: 500;
}

a {
  text-decoration: none;
}

hr {
  border: none;
  border-top: 1px solid var(--bg-muted);
  margin: 24px 0;
}
.--padded hr {
  margin: 24px -24px;
}
hr.--thick {
  border-width: 3px;
}

.block .block-header .icon {
  opacity: 0.4;
}

.block .block-header h1 {
  line-height: 36px;
  font-size: 16px;
  margin: 0 0 0 12px;
}

.block .body .--padded {
  padding: 24px 24px;
  display: block;
}

/*
  ----- BUTTONS -----

  a) <ButtonField text="xxx" action="xxx" type="neutral"></ButtonField>
  b) <input type="submit" class="input alert button" value="xxx">
  c) <a class="neutral button"><span class="text">xxx</span></a>
*/
.button {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 36px;
  background: var(--hub);
  border: 0;
  border-bottom: 2px solid var(--hub-darker);
  border-radius: var(--radius);
  cursor: pointer;
  outline: none;
  padding: 0 15px;
  color: var(--bg-white);
  font-weight: 600;
  font-size: 14px;
}
.button .icon {
  display: flex;
  opacity: 0.5;
  position: relative;
}
.button .icon + .text {
  margin-left: 10px;
}
.button .text {
  color: var(--card);
  position: relative;
}
.button.active {
  box-shadow: 0 3px 1px hsla(var(--text-hsl), 0.4) inset;
}
.button:hover,
.button.active {
  background: var(--hub-darker);
  text-decoration: none;
}
.button:hover .icon,
.button.active .icon {
  top: 1px;
}
.button:hover .text,
.button.active .text {
  top: 1px;
}
.button:hover.input,
.button.active.input {
  padding-top: 2px;
}
.button:focus {
  box-shadow: 0 0 0 4px hsla(var(--hub-hsl), 0.25);
}
.button.input {
  width: auto;
}
.button.success {
  background: var(--success);
  border-color: var(--success-darker);
}
.button.success:hover,
.button.success.active {
  background: var(--success-darker);
}
.button.success:focus {
  box-shadow: 0 0 0 4px hsla(var(--success-darker-hsl), 0.25);
}
.button.alert {
  background: var(--alert);
  border-color: var(--alert-darker);
}
.button.alert:hover,
.button.alert.active {
  background: var(--alert-darker);
}
.button.alert:focus {
  box-shadow: 0 0 0 4px hsla(var(--alert-darker-hsl), 0.25);
}
.button.neutral {
  --neutral-darker: hsl(0, 3%, 48%);
  --neutral-darker-hsl: 0, 3%, 48%;
  background: var(--text-light);
  border-color: var(--neutral-darker);
}
.button.neutral.active {
  background: var(--neutral-darker);
}
.button.neutral:hover {
  background: var(--neutral-darker);
  box-shadow: none;
}
.button.neutral:focus {
  box-shadow: 0 0 0 4px hsla(var(--neutral-darker-hsl), 0.25);
}
.button.outlined {
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  background: transparent;
  font-weight: 500;
  font-size: 14px;
  color: var(--text-muted);
  line-height: 36px;
  display: flex;
  height: 36px;
  padding: 0 11px;
}
.button.outlined .text {
  color: var(--text-muted);
}
.button.outlined.active {
  box-shadow: none;
  background: hsla(var(--text-light-hsl), 0.2);
}
.button.outlined:hover,
.button.outlined.active {
  border-color: var(--text-light);
}
.button.outlined:hover .icon,
.button.outlined.active .icon {
  top: 0;
}
.button.outlined:hover .text,
.button.outlined.active .text {
  top: 0;
}
.button.outlined:focus {
  box-shadow: 0 0 0 4px hsla(var(--bg-muted-hsl), 0.5);
}
.button.transparent {
  opacity: 0.3;
}

/*
  ----- FORMS -----

  <label>
    Label title
    <input type="text">
  </label>
*/
label {
  font-size: 12px;
  line-height: 36px;
  color: var(--text-light);
  text-transform: uppercase;
  cursor: pointer;
}
label:hover {
  color: var(--text-muted);
}
label:focus-within {
  color: var(--hub);
  font-weight: 560;
}
label.toggle-button {
  display: flex;
  text-transform: none;
  line-height: 24px;
  margin: 12px 0;
}
label.toggle-button:focus-within {
  font-weight: inherit;
}
label.toggle-button SliderField {
  flex: auto;
  margin: 4px 18px 0 0;
}
label.toggle-button .text {
  flex: 1 1 100%;
  color: var(--text-muted);
}
label.toggle-button .text strong {
  font-size: 15px;
  color: var(--text);
  display: block;
}
label.toggle-button .text small {
  font-size: 13px;
}

input,
textarea,
select {
  box-sizing: border-box;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  outline: none;
  width: 100%;
  padding: 12px 24px;
  margin-bottom: 12px;
  font-size: 15px;
  color: var(--text);
  line-height: 24px;
}
input[type="checkbox"],
textarea[type="checkbox"],
select[type="checkbox"] {
  width: auto;
}
input:not(.button)[disabled],
input:not(.button)[readonly],
textarea:not(.button)[disabled],
textarea:not(.button)[readonly],
select:not(.button)[disabled],
select:not(.button)[readonly] {
  color: var(--text-muted);
}
input:not(.button):hover,
textarea:not(.button):hover,
select:not(.button):hover {
  border: 1px solid var(--text-light);
}
input:not(.button):focus,
textarea:not(.button):focus,
select:not(.button):focus {
  border: 1px solid var(--hub);
  box-shadow: 0px 0px 0px 3px hsla(var(--hub-hsl), 0.2);
}

.table-header {
  font-size: 12px;
  line-height: 24px;
  color: var(--text-light);
  text-transform: uppercase;
}

.howto-link:hover,
.howto-link:focus {
  text-decoration: underline;
}

.howto-link::after {
  content: " ->";
}

.grid-container {
  --columns: 1;
  --gapH: 12px;
  --gapV: 0;
  display: grid;
  column-gap: var(--gapH);
  row-gap: var(--gapV);
  grid-template-columns: repeat(var(--columns), 1fr);
}
@media only screen and (min-width: 769px) {
  .grid-container {
    --gapH: 24px;
  }
}
.grid-container.--two-columns {
  --gapH: 24px;
}
@media only screen and (min-width: 1216px) {
  .grid-container.--two-columns {
    --columns: 2;
  }
}
@media only screen and (min-width: 769px) {
  .grid-container.--four-columns {
    --columns: 2;
    --gapV: 24px;
  }
}
@media only screen and (min-width: 1216px) {
  .grid-container.--four-columns {
    --columns: 4;
  }
}

.control-bar {
  background-color: var(--card-muted);
  margin: 0 calc(-1 * var(--main-content-gutter)) 24px;
  padding: 0;
}
@media only screen and (min-width: 1216px) {
  .control-bar {
    padding: 0 var(--main-content-gutter);
    display: flex;
  }
}
.control-bar .filtering,
.control-bar .sorting {
  display: flex;
  flex-direction: column;
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering,
  .control-bar .sorting {
    flex-direction: row;
    flex-wrap: wrap;
  }
}
.control-bar .filtering > *,
.control-bar .sorting > * {
  border-bottom: 1px solid var(--bg-muted);
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 50%;
  }
}
@media only screen and (min-width: 1000px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 33.3%;
  }
}
@media only screen and (min-width: 1150px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 25%;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    border: 0;
  }
}
@media only screen and (min-width: 1400px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 0 1 200px;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering {
    flex: 1 1;
    align-self: flex-start;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > * {
    border-right: 1px solid var(--bg-muted);
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting {
    flex: 0 1;
    align-self: center;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting > * {
    border-left: 1px solid var(--bg-muted);
  }
}

.picker-with-search {
  --list-height: 320px;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
}
.picker-with-search .search {
  border-bottom: 1px solid var(--bg-muted);
  display: flex;
  align-items: center;
  padding: 0 0 0 24px;
}
.picker-with-search .search input {
  border: none;
  margin: 0;
  box-shadow: none;
}
.picker-with-search .search:focus-within .icon * {
  fill: var(--hub);
}
.picker-with-search ul.items {
  padding: 6px;
  margin: 0;
  list-style: none;
  font-size: 13px;
  max-height: var(--list-height);
  overflow: auto;
}
.picker-with-search ul.items label {
  line-height: 24px;
  text-transform: none;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding: 6px 18px;
  margin: 2px 0;
  border-radius: var(--radius);
  cursor: pointer;
}
.picker-with-search ul.items label:hover {
  background: var(--card-muted);
}
.picker-with-search ul.items label.selected {
  background: hsla(var(--hub-hsl), 0.1);
}
.picker-with-search ul.items label.selected .name,
.picker-with-search ul.items label.selected .meta {
  color: var(--hub);
}
.picker-with-search ul.items label.selected:hover {
  background: hsla(var(--hub-hsl), 0.15);
}
.picker-with-search ul.items label .checkbox {
  width: auto;
  padding: 0;
  margin: 0;
  flex: 0;
}
.picker-with-search ul.items label .checkbox[disabled] ~ .name {
  color: var(--text-muted);
}
.picker-with-search ul.items label .checkbox[disabled] ~ .meta {
  color: var(--text-light);
}
.picker-with-search ul.items label .icon {
  margin-left: 18px;
}
.picker-with-search ul.items label .name {
  margin: 0 24px 0 12px;
  flex: 1 1;
  color: var(--text);
  font-weight: 600;
}
.picker-with-search ul.items label .meta {
  font-weight: 400;
  color: var(--text-muted);
}

section.not-found {
  width: 100%;
  border: 2px dashed var(--bg-muted);
  padding: 48px 24px;
  text-align: center;
}
section.not-found .center {
  display: flex;
  flex-direction: column;
  align-items: center;
}
section.not-found h1 {
  font-size: 18px;
  line-height: 36px;
  margin: 0;
}
section.not-found p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
  margin: 12px auto 24px;
  max-width: 33rem;
}

.mat-datepicker-content {
  translate: -54px 6px;
}

ngxgeo-autocomplete #search_places {
  background: var(--card);
  border: 1px solid var(--bg-muted);
  padding: 14px 25px;
  outline: none;
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  background: var(--card) !important;
  border-radius: var(--radius);
  border: none !important;
  font-weight: 400;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown ul {
  padding: 0 7px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .currentlocation a {
  box-sizing: border-box;
  padding: 6px 24px !important;
  text-transform: capitalize;
  letter-spacing: 0;
  font-size: 13px !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  text-transform: none;
  padding: 6px 24px !important;
  box-sizing: border-box;
  line-height: 24px;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a:hover,
ngxgeo-autocomplete .custom-autocomplete__dropdown a:focus {
  background: var(--card-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .main-text {
  font-weight: 500 !important;
  font-size: 13px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .secondary_text {
  color: var(--text-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active {
  background-color: var(--card-muted) !important;
  color: var(--text-muted) !important;
  display: flex;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active a {
  background: transparent !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active .secondary_text {
  color: var(--text-muted) !important;
}

ngxgeo-autocomplete .heading {
  padding: 0 0 0 24px !important;
  box-sizing: border-box;
  overflow: hidden;
}
ngxgeo-autocomplete .heading .line-recent {
  left: 170px !important;
  top: 17px !important;
  width: calc(100% - 170px) !important;
}
ngxgeo-autocomplete .heading .line-location {
  left: 116px !important;
  top: 18px !important;
  width: calc(100% - 116px) !important;
}

ngxgeo-autocomplete
  .custom-autocomplete__dropdown
  .currentlocation
  .location-icon,
ngxgeo-autocomplete .custom-autocomplete__dropdown .custom-icon {
  display: none !important;
}

.debug-responsivity .size {
  position: fixed;
  bottom: 0;
  left: 0;
  z-index: 100;
  background: var(--text);
  color: var(--bg);
  font-size: 0.6em;
  font-weight: 600;
  padding: 0 3px;
  display: none;
}

.debug-responsivity .none {
  display: inline-block;
}

@media only screen and (min-width: 769px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .t {
    display: inline-block;
  }
}

@media only screen and (min-width: 1024px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .d {
    display: inline-block;
  }
}

@media only screen and (min-width: 1216px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .w {
    display: inline-block;
  }
}

@media only screen and (min-width: 1408px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .f {
    display: inline-block;
  }
}

.show-grid {
  background-image: linear-gradient(
    to bottom,
    #0ff 0px,
    rgba(255, 255, 255, 0) 1px
  );
  background-repeat: repeat-y;
  background-size: 100% 12px;
}

.profile-bar .table-header {
  margin: 24px 0 0;
}

.profile-bar .user {
  display: flex;
  align-items: center;
  margin: 12px 0 0;
  outline: none;
  cursor: pointer;
}
.profile-bar .user.is-active {
  background: hsla(var(--hub-hsl), 0.1);
  border-radius: var(--radius);
  border-top-left-radius: 30px;
  border-bottom-left-radius: 30px;
}
.profile-bar .user.is-active .photo {
  border-color: var(--hub);
}

.profile-bar .photo {
  border-radius: 50%;
  width: 44px;
  margin-right: 20px;
  border: 2px solid transparent;
}

.profile-bar .user-info {
  flex: 1 0;
}
.profile-bar .user-info a,
.profile-bar .user-info a:hover,
.profile-bar .user-info a:active {
  text-decoration: none;
}
.profile-bar .user-info .username {
  font-size: 15px;
  color: var(--text);
}
.profile-bar .user-info small.role {
  font-size: 12px;
  color: var(--text-muted);
}

.profile-bar .logout {
  display: flex;
  cursor: pointer;
  padding-right: 10px;
  z-index: 9999;
}
.profile-bar .logout svg {
  fill: var(--text-light);
}
.profile-bar .logout svg:focus,
.profile-bar .logout svg:hover {
  fill: var(--alert);
}

/*
  Override SASS' handling of HSL(a) color functions, don't touch it and let CSS handle it itself.
  This will enable the trick with variable alpha channels for CSS color variables (see below).
*/
/*
  Function for defining (not only) vertical rhythm by multiplies of 12px
    Examples:
    width: size(2); (equals to "width: 24px;")
    line-height: size(3); (equals to "line-height: 36px;")
*/
/*
  Responsivity mixin for custom min-width styles
    Examples:
    @include break-from(450px) { ... }
*/
:root {
  --radius: 4px;
  --main-content-gutter: 24px;
}
@media only screen and (min-width: 769px) {
  :root {
    --main-content-gutter: 36px;
  }
}
@media only screen and (min-width: 1216px) {
  :root {
    --main-content-gutter: 48px;
  }
}

/*
  Usage:
  @extend %box-shadow;
*/
.control-bar {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.04), 0px 3px 4px rgba(0, 0, 0, 0.1);
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.24), 0px 3px 4px rgba(0, 0, 0, 0.2);
}

.button,
.button .icon,
.button .text,
label,
input,
textarea,
select,
.picker-with-search ul.items label,
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  transition: all 0.1s;
}

/*
  Self-hosted fonts
*/
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Regular.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Regular.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Medium.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Medium.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 600;
  font-display: swap;
  src: url("/fonts/Inter/Inter-SemiBold.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-SemiBold.woff?v=3.18") format("woff");
}

/* -------------------------------------------------------
Variable font.
Usage:

  body {
    font-family: 'Inter', sans-serif; // use regular Inter font by default..
    @supports (font-variation-settings: normal) {
      font-family: 'Inter var', sans-serif; // ..but if supported, use variable Inter font instead (all-in-one)
    }
  }

*/
@font-face {
  font-family: "Inter var";
  font-weight: 100 900;
  font-display: swap;
  font-style: normal;
  font-named-instance: "Regular";
  src: url("/fonts/Inter/Inter-roman.var.woff2?v=3.18") format("woff2");
}

html {
  box-sizing: border-box;
}

body {
  box-sizing: border-box;
  background: var(--bg);
  margin: 0;
  padding: 0;
  font-family: "Inter", sans-serif;
}
@supports (font-variation-settings: normal) {
  body {
    font-family: "Inter var", sans-serif;
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 600;
  color: var(--text);
}

p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
}

b,
strong {
  font-weight: 500;
}

a {
  text-decoration: none;
}

hr {
  border: none;
  border-top: 1px solid var(--bg-muted);
  margin: 24px 0;
}
.--padded hr {
  margin: 24px -24px;
}
hr.--thick {
  border-width: 3px;
}

.block .block-header .icon {
  opacity: 0.4;
}

.block .block-header h1 {
  line-height: 36px;
  font-size: 16px;
  margin: 0 0 0 12px;
}

.block .body .--padded {
  padding: 24px 24px;
  display: block;
}

/*
  ----- BUTTONS -----

  a) <ButtonField text="xxx" action="xxx" type="neutral"></ButtonField>
  b) <input type="submit" class="input alert button" value="xxx">
  c) <a class="neutral button"><span class="text">xxx</span></a>
*/
.button {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 36px;
  background: var(--hub);
  border: 0;
  border-bottom: 2px solid var(--hub-darker);
  border-radius: var(--radius);
  cursor: pointer;
  outline: none;
  padding: 0 15px;
  color: var(--bg-white);
  font-weight: 600;
  font-size: 14px;
}
.button .icon {
  display: flex;
  opacity: 0.5;
  position: relative;
}
.button .icon + .text {
  margin-left: 10px;
}
.button .text {
  color: var(--card);
  position: relative;
}
.button.active {
  box-shadow: 0 3px 1px hsla(var(--text-hsl), 0.4) inset;
}
.button:hover,
.button.active {
  background: var(--hub-darker);
  text-decoration: none;
}
.button:hover .icon,
.button.active .icon {
  top: 1px;
}
.button:hover .text,
.button.active .text {
  top: 1px;
}
.button:hover.input,
.button.active.input {
  padding-top: 2px;
}
.button:focus {
  box-shadow: 0 0 0 4px hsla(var(--hub-hsl), 0.25);
}
.button.input {
  width: auto;
}
.button.success {
  background: var(--success);
  border-color: var(--success-darker);
}
.button.success:hover,
.button.success.active {
  background: var(--success-darker);
}
.button.success:focus {
  box-shadow: 0 0 0 4px hsla(var(--success-darker-hsl), 0.25);
}
.button.alert {
  background: var(--alert);
  border-color: var(--alert-darker);
}
.button.alert:hover,
.button.alert.active {
  background: var(--alert-darker);
}
.button.alert:focus {
  box-shadow: 0 0 0 4px hsla(var(--alert-darker-hsl), 0.25);
}
.button.neutral {
  --neutral-darker: hsl(0, 3%, 48%);
  --neutral-darker-hsl: 0, 3%, 48%;
  background: var(--text-light);
  border-color: var(--neutral-darker);
}
.button.neutral.active {
  background: var(--neutral-darker);
}
.button.neutral:hover {
  background: var(--neutral-darker);
  box-shadow: none;
}
.button.neutral:focus {
  box-shadow: 0 0 0 4px hsla(var(--neutral-darker-hsl), 0.25);
}
.button.outlined {
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  background: transparent;
  font-weight: 500;
  font-size: 14px;
  color: var(--text-muted);
  line-height: 36px;
  display: flex;
  height: 36px;
  padding: 0 11px;
}
.button.outlined .text {
  color: var(--text-muted);
}
.button.outlined.active {
  box-shadow: none;
  background: hsla(var(--text-light-hsl), 0.2);
}
.button.outlined:hover,
.button.outlined.active {
  border-color: var(--text-light);
}
.button.outlined:hover .icon,
.button.outlined.active .icon {
  top: 0;
}
.button.outlined:hover .text,
.button.outlined.active .text {
  top: 0;
}
.button.outlined:focus {
  box-shadow: 0 0 0 4px hsla(var(--bg-muted-hsl), 0.5);
}
.button.transparent {
  opacity: 0.3;
}

/*
  ----- FORMS -----

  <label>
    Label title
    <input type="text">
  </label>
*/
label {
  font-size: 12px;
  line-height: 36px;
  color: var(--text-light);
  text-transform: uppercase;
  cursor: pointer;
}
label:hover {
  color: var(--text-muted);
}
label:focus-within {
  color: var(--hub);
  font-weight: 560;
}
label.toggle-button {
  display: flex;
  text-transform: none;
  line-height: 24px;
  margin: 12px 0;
}
label.toggle-button:focus-within {
  font-weight: inherit;
}
label.toggle-button SliderField {
  flex: auto;
  margin: 4px 18px 0 0;
}
label.toggle-button .text {
  flex: 1 1 100%;
  color: var(--text-muted);
}
label.toggle-button .text strong {
  font-size: 15px;
  color: var(--text);
  display: block;
}
label.toggle-button .text small {
  font-size: 13px;
}

input,
textarea,
select {
  box-sizing: border-box;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  outline: none;
  width: 100%;
  padding: 12px 24px;
  margin-bottom: 12px;
  font-size: 15px;
  color: var(--text);
  line-height: 24px;
}
input[type="checkbox"],
textarea[type="checkbox"],
select[type="checkbox"] {
  width: auto;
}
input:not(.button)[disabled],
input:not(.button)[readonly],
textarea:not(.button)[disabled],
textarea:not(.button)[readonly],
select:not(.button)[disabled],
select:not(.button)[readonly] {
  color: var(--text-muted);
}
input:not(.button):hover,
textarea:not(.button):hover,
select:not(.button):hover {
  border: 1px solid var(--text-light);
}
input:not(.button):focus,
textarea:not(.button):focus,
select:not(.button):focus {
  border: 1px solid var(--hub);
  box-shadow: 0px 0px 0px 3px hsla(var(--hub-hsl), 0.2);
}

.table-header {
  font-size: 12px;
  line-height: 24px;
  color: var(--text-light);
  text-transform: uppercase;
}

.howto-link:hover,
.howto-link:focus {
  text-decoration: underline;
}

.howto-link::after {
  content: " ->";
}

.grid-container {
  --columns: 1;
  --gapH: 12px;
  --gapV: 0;
  display: grid;
  column-gap: var(--gapH);
  row-gap: var(--gapV);
  grid-template-columns: repeat(var(--columns), 1fr);
}
@media only screen and (min-width: 769px) {
  .grid-container {
    --gapH: 24px;
  }
}
.grid-container.--two-columns {
  --gapH: 24px;
}
@media only screen and (min-width: 1216px) {
  .grid-container.--two-columns {
    --columns: 2;
  }
}
@media only screen and (min-width: 769px) {
  .grid-container.--four-columns {
    --columns: 2;
    --gapV: 24px;
  }
}
@media only screen and (min-width: 1216px) {
  .grid-container.--four-columns {
    --columns: 4;
  }
}

.control-bar {
  background-color: var(--card-muted);
  margin: 0 calc(-1 * var(--main-content-gutter)) 24px;
  padding: 0;
}
@media only screen and (min-width: 1216px) {
  .control-bar {
    padding: 0 var(--main-content-gutter);
    display: flex;
  }
}
.control-bar .filtering,
.control-bar .sorting {
  display: flex;
  flex-direction: column;
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering,
  .control-bar .sorting {
    flex-direction: row;
    flex-wrap: wrap;
  }
}
.control-bar .filtering > *,
.control-bar .sorting > * {
  border-bottom: 1px solid var(--bg-muted);
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 50%;
  }
}
@media only screen and (min-width: 1000px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 33.3%;
  }
}
@media only screen and (min-width: 1150px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 25%;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    border: 0;
  }
}
@media only screen and (min-width: 1400px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 0 1 200px;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering {
    flex: 1 1;
    align-self: flex-start;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > * {
    border-right: 1px solid var(--bg-muted);
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting {
    flex: 0 1;
    align-self: center;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting > * {
    border-left: 1px solid var(--bg-muted);
  }
}

.picker-with-search {
  --list-height: 320px;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
}
.picker-with-search .search {
  border-bottom: 1px solid var(--bg-muted);
  display: flex;
  align-items: center;
  padding: 0 0 0 24px;
}
.picker-with-search .search input {
  border: none;
  margin: 0;
  box-shadow: none;
}
.picker-with-search .search:focus-within .icon * {
  fill: var(--hub);
}
.picker-with-search ul.items {
  padding: 6px;
  margin: 0;
  list-style: none;
  font-size: 13px;
  max-height: var(--list-height);
  overflow: auto;
}
.picker-with-search ul.items label {
  line-height: 24px;
  text-transform: none;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding: 6px 18px;
  margin: 2px 0;
  border-radius: var(--radius);
  cursor: pointer;
}
.picker-with-search ul.items label:hover {
  background: var(--card-muted);
}
.picker-with-search ul.items label.selected {
  background: hsla(var(--hub-hsl), 0.1);
}
.picker-with-search ul.items label.selected .name,
.picker-with-search ul.items label.selected .meta {
  color: var(--hub);
}
.picker-with-search ul.items label.selected:hover {
  background: hsla(var(--hub-hsl), 0.15);
}
.picker-with-search ul.items label .checkbox {
  width: auto;
  padding: 0;
  margin: 0;
  flex: 0;
}
.picker-with-search ul.items label .checkbox[disabled] ~ .name {
  color: var(--text-muted);
}
.picker-with-search ul.items label .checkbox[disabled] ~ .meta {
  color: var(--text-light);
}
.picker-with-search ul.items label .icon {
  margin-left: 18px;
}
.picker-with-search ul.items label .name {
  margin: 0 24px 0 12px;
  flex: 1 1;
  color: var(--text);
  font-weight: 600;
}
.picker-with-search ul.items label .meta {
  font-weight: 400;
  color: var(--text-muted);
}

section.not-found {
  width: 100%;
  border: 2px dashed var(--bg-muted);
  padding: 48px 24px;
  text-align: center;
}
section.not-found .center {
  display: flex;
  flex-direction: column;
  align-items: center;
}
section.not-found h1 {
  font-size: 18px;
  line-height: 36px;
  margin: 0;
}
section.not-found p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
  margin: 12px auto 24px;
  max-width: 33rem;
}

.mat-datepicker-content {
  translate: -54px 6px;
}

ngxgeo-autocomplete #search_places {
  background: var(--card);
  border: 1px solid var(--bg-muted);
  padding: 14px 25px;
  outline: none;
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  background: var(--card) !important;
  border-radius: var(--radius);
  border: none !important;
  font-weight: 400;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown ul {
  padding: 0 7px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .currentlocation a {
  box-sizing: border-box;
  padding: 6px 24px !important;
  text-transform: capitalize;
  letter-spacing: 0;
  font-size: 13px !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  text-transform: none;
  padding: 6px 24px !important;
  box-sizing: border-box;
  line-height: 24px;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a:hover,
ngxgeo-autocomplete .custom-autocomplete__dropdown a:focus {
  background: var(--card-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .main-text {
  font-weight: 500 !important;
  font-size: 13px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .secondary_text {
  color: var(--text-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active {
  background-color: var(--card-muted) !important;
  color: var(--text-muted) !important;
  display: flex;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active a {
  background: transparent !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active .secondary_text {
  color: var(--text-muted) !important;
}

ngxgeo-autocomplete .heading {
  padding: 0 0 0 24px !important;
  box-sizing: border-box;
  overflow: hidden;
}
ngxgeo-autocomplete .heading .line-recent {
  left: 170px !important;
  top: 17px !important;
  width: calc(100% - 170px) !important;
}
ngxgeo-autocomplete .heading .line-location {
  left: 116px !important;
  top: 18px !important;
  width: calc(100% - 116px) !important;
}

ngxgeo-autocomplete
  .custom-autocomplete__dropdown
  .currentlocation
  .location-icon,
ngxgeo-autocomplete .custom-autocomplete__dropdown .custom-icon {
  display: none !important;
}

.debug-responsivity .size {
  position: fixed;
  bottom: 0;
  left: 0;
  z-index: 100;
  background: var(--text);
  color: var(--bg);
  font-size: 0.6em;
  font-weight: 600;
  padding: 0 3px;
  display: none;
}

.debug-responsivity .none {
  display: inline-block;
}

@media only screen and (min-width: 769px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .t {
    display: inline-block;
  }
}

@media only screen and (min-width: 1024px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .d {
    display: inline-block;
  }
}

@media only screen and (min-width: 1216px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .w {
    display: inline-block;
  }
}

@media only screen and (min-width: 1408px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .f {
    display: inline-block;
  }
}

.show-grid {
  background-image: linear-gradient(
    to bottom,
    #0ff 0px,
    rgba(255, 255, 255, 0) 1px
  );
  background-repeat: repeat-y;
  background-size: 100% 12px;
}

ul.nav {
  margin: 8px 0 -6px;
  padding: 0;
  list-style: none;
}
ul.nav .text-light {
  color: var(--text-light);
}
ul.nav > li.dropdown {
  padding: 0;
}
ul.nav .ellipsis {
  padding: 0;
}
ul.nav .ellipsis a {
  justify-content: center;
}
ul.nav a {
  padding: 0 10px;
  margin: 2px 0 0;
  display: flex;
  align-items: center;
  font-size: 14px;
  line-height: 34px;
  color: var(--text-light);
  text-decoration: none;
  border-radius: var(--radius);
}
ul.nav a span {
  flex: 1;
  padding-left: 10px;
  color: var(--text);
}
ul.nav a:hover,
ul.nav a:focus {
  background: hsla(var(--text-hsl), 0.05);
}
ul.nav a.is-active {
  font-weight: 600;
  background: hsla(var(--hub-hsl), 0.1);
}
ul.nav a.is-active span {
  color: var(--hub);
}
ul.nav a.is-active .icon * {
  fill: var(--hub);
}
ul.nav a.is-active .badge {
  color: var(--hub);
  font-weight: 400;
  box-shadow: 0 0 0 1px hsla(var(--hub-hsl), 0.5) inset;
}
ul.nav a .menu-caret {
  flex: 0;
  display: flex;
  cursor: pointer;
}
ul.nav a .menu-caret * {
  fill: var(--text-light);
}
ul.nav a .menu-caret.open {
  transform: rotate(180deg);
}
ul.nav a .menu-caret.open * {
  fill: var(--hub);
}
ul.nav a .badge {
  flex: 0;
  box-shadow: 0 0 0 1px var(--bg-muted) inset;
  border-radius: var(--radius);
  font-size: 12px;
  line-height: 24px;
  color: var(--text-light);
  padding: 0 6px;
}
ul.nav Submenu {
  display: block;
}
ul.nav ul.sub-menu {
  padding: 6px 24px;
  margin: 6px 0;
  list-style: none;
  background: var(--card-muted);
  box-shadow: inset 4px 0px 0px var(--bg-muted),
    inset 0px 1px 0px var(--bg-muted), inset 0px -1px 0px var(--bg-muted);
}
ul.nav ul.sub-menu li {
  margin: 2px 0 0;
}
ul.nav .media-buffer {
  padding: 18px 0 6px;
}
ul.nav .media-buffer .information {
  text-align: center;
  width: 100%;
  font-size: 11px;
  line-height: 36px;
  color: var(--text-light);
}
ul.nav .media-buffer .information span.percentage {
  color: var(--text-muted);
}

.main {
  flex: 1;
}
.main .main-body {
  margin: 0 var(--main-content-gutter) 60px;
}

/*
  Override SASS' handling of HSL(a) color functions, don't touch it and let CSS handle it itself.
  This will enable the trick with variable alpha channels for CSS color variables (see below).
*/
/*
  Function for defining (not only) vertical rhythm by multiplies of 12px
    Examples:
    width: size(2); (equals to "width: 24px;")
    line-height: size(3); (equals to "line-height: 36px;")
*/
/*
  Responsivity mixin for custom min-width styles
    Examples:
    @include break-from(450px) { ... }
*/
:root {
  --radius: 4px;
  --main-content-gutter: 24px;
}
@media only screen and (min-width: 769px) {
  :root {
    --main-content-gutter: 36px;
  }
}
@media only screen and (min-width: 1216px) {
  :root {
    --main-content-gutter: 48px;
  }
}

/*
  Usage:
  @extend %box-shadow;
*/
.control-bar {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.04), 0px 3px 4px rgba(0, 0, 0, 0.1);
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.24), 0px 3px 4px rgba(0, 0, 0, 0.2);
}

.button,
.button .icon,
.button .text,
label,
input,
textarea,
select,
.picker-with-search ul.items label,
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  transition: all 0.1s;
}

/*
  Self-hosted fonts
*/
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Regular.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Regular.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Medium.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Medium.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 600;
  font-display: swap;
  src: url("/fonts/Inter/Inter-SemiBold.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-SemiBold.woff?v=3.18") format("woff");
}

/* -------------------------------------------------------
Variable font.
Usage:

  body {
    font-family: 'Inter', sans-serif; // use regular Inter font by default..
    @supports (font-variation-settings: normal) {
      font-family: 'Inter var', sans-serif; // ..but if supported, use variable Inter font instead (all-in-one)
    }
  }

*/
@font-face {
  font-family: "Inter var";
  font-weight: 100 900;
  font-display: swap;
  font-style: normal;
  font-named-instance: "Regular";
  src: url("/fonts/Inter/Inter-roman.var.woff2?v=3.18") format("woff2");
}

html {
  box-sizing: border-box;
}

body {
  box-sizing: border-box;
  background: var(--bg);
  margin: 0;
  padding: 0;
  font-family: "Inter", sans-serif;
}
@supports (font-variation-settings: normal) {
  body {
    font-family: "Inter var", sans-serif;
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 600;
  color: var(--text);
}

p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
}

b,
strong {
  font-weight: 500;
}

a {
  text-decoration: none;
}

hr {
  border: none;
  border-top: 1px solid var(--bg-muted);
  margin: 24px 0;
}
.--padded hr {
  margin: 24px -24px;
}
hr.--thick {
  border-width: 3px;
}

.block .block-header .icon {
  opacity: 0.4;
}

.block .block-header h1 {
  line-height: 36px;
  font-size: 16px;
  margin: 0 0 0 12px;
}

.block .body .--padded {
  padding: 24px 24px;
  display: block;
}

/*
  ----- BUTTONS -----

  a) <ButtonField text="xxx" action="xxx" type="neutral"></ButtonField>
  b) <input type="submit" class="input alert button" value="xxx">
  c) <a class="neutral button"><span class="text">xxx</span></a>
*/
.button {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 36px;
  background: var(--hub);
  border: 0;
  border-bottom: 2px solid var(--hub-darker);
  border-radius: var(--radius);
  cursor: pointer;
  outline: none;
  padding: 0 15px;
  color: var(--bg-white);
  font-weight: 600;
  font-size: 14px;
}
.button .icon {
  display: flex;
  opacity: 0.5;
  position: relative;
}
.button .icon + .text {
  margin-left: 10px;
}
.button .text {
  color: var(--card);
  position: relative;
}
.button.active {
  box-shadow: 0 3px 1px hsla(var(--text-hsl), 0.4) inset;
}
.button:hover,
.button.active {
  background: var(--hub-darker);
  text-decoration: none;
}
.button:hover .icon,
.button.active .icon {
  top: 1px;
}
.button:hover .text,
.button.active .text {
  top: 1px;
}
.button:hover.input,
.button.active.input {
  padding-top: 2px;
}
.button:focus {
  box-shadow: 0 0 0 4px hsla(var(--hub-hsl), 0.25);
}
.button.input {
  width: auto;
}
.button.success {
  background: var(--success);
  border-color: var(--success-darker);
}
.button.success:hover,
.button.success.active {
  background: var(--success-darker);
}
.button.success:focus {
  box-shadow: 0 0 0 4px hsla(var(--success-darker-hsl), 0.25);
}
.button.alert {
  background: var(--alert);
  border-color: var(--alert-darker);
}
.button.alert:hover,
.button.alert.active {
  background: var(--alert-darker);
}
.button.alert:focus {
  box-shadow: 0 0 0 4px hsla(var(--alert-darker-hsl), 0.25);
}
.button.neutral {
  --neutral-darker: hsl(0, 3%, 48%);
  --neutral-darker-hsl: 0, 3%, 48%;
  background: var(--text-light);
  border-color: var(--neutral-darker);
}
.button.neutral.active {
  background: var(--neutral-darker);
}
.button.neutral:hover {
  background: var(--neutral-darker);
  box-shadow: none;
}
.button.neutral:focus {
  box-shadow: 0 0 0 4px hsla(var(--neutral-darker-hsl), 0.25);
}
.button.outlined {
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  background: transparent;
  font-weight: 500;
  font-size: 14px;
  color: var(--text-muted);
  line-height: 36px;
  display: flex;
  height: 36px;
  padding: 0 11px;
}
.button.outlined .text {
  color: var(--text-muted);
}
.button.outlined.active {
  box-shadow: none;
  background: hsla(var(--text-light-hsl), 0.2);
}
.button.outlined:hover,
.button.outlined.active {
  border-color: var(--text-light);
}
.button.outlined:hover .icon,
.button.outlined.active .icon {
  top: 0;
}
.button.outlined:hover .text,
.button.outlined.active .text {
  top: 0;
}
.button.outlined:focus {
  box-shadow: 0 0 0 4px hsla(var(--bg-muted-hsl), 0.5);
}
.button.transparent {
  opacity: 0.3;
}

/*
  ----- FORMS -----

  <label>
    Label title
    <input type="text">
  </label>
*/
label {
  font-size: 12px;
  line-height: 36px;
  color: var(--text-light);
  text-transform: uppercase;
  cursor: pointer;
}
label:hover {
  color: var(--text-muted);
}
label:focus-within {
  color: var(--hub);
  font-weight: 560;
}
label.toggle-button {
  display: flex;
  text-transform: none;
  line-height: 24px;
  margin: 12px 0;
}
label.toggle-button:focus-within {
  font-weight: inherit;
}
label.toggle-button SliderField {
  flex: auto;
  margin: 4px 18px 0 0;
}
label.toggle-button .text {
  flex: 1 1 100%;
  color: var(--text-muted);
}
label.toggle-button .text strong {
  font-size: 15px;
  color: var(--text);
  display: block;
}
label.toggle-button .text small {
  font-size: 13px;
}

input,
textarea,
select {
  box-sizing: border-box;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  outline: none;
  width: 100%;
  padding: 12px 24px;
  margin-bottom: 12px;
  font-size: 15px;
  color: var(--text);
  line-height: 24px;
}
input[type="checkbox"],
textarea[type="checkbox"],
select[type="checkbox"] {
  width: auto;
}
input:not(.button)[disabled],
input:not(.button)[readonly],
textarea:not(.button)[disabled],
textarea:not(.button)[readonly],
select:not(.button)[disabled],
select:not(.button)[readonly] {
  color: var(--text-muted);
}
input:not(.button):hover,
textarea:not(.button):hover,
select:not(.button):hover {
  border: 1px solid var(--text-light);
}
input:not(.button):focus,
textarea:not(.button):focus,
select:not(.button):focus {
  border: 1px solid var(--hub);
  box-shadow: 0px 0px 0px 3px hsla(var(--hub-hsl), 0.2);
}

.table-header {
  font-size: 12px;
  line-height: 24px;
  color: var(--text-light);
  text-transform: uppercase;
}

.howto-link:hover,
.howto-link:focus {
  text-decoration: underline;
}

.howto-link::after {
  content: " ->";
}

.grid-container {
  --columns: 1;
  --gapH: 12px;
  --gapV: 0;
  display: grid;
  column-gap: var(--gapH);
  row-gap: var(--gapV);
  grid-template-columns: repeat(var(--columns), 1fr);
}
@media only screen and (min-width: 769px) {
  .grid-container {
    --gapH: 24px;
  }
}
.grid-container.--two-columns {
  --gapH: 24px;
}
@media only screen and (min-width: 1216px) {
  .grid-container.--two-columns {
    --columns: 2;
  }
}
@media only screen and (min-width: 769px) {
  .grid-container.--four-columns {
    --columns: 2;
    --gapV: 24px;
  }
}
@media only screen and (min-width: 1216px) {
  .grid-container.--four-columns {
    --columns: 4;
  }
}

.control-bar {
  background-color: var(--card-muted);
  margin: 0 calc(-1 * var(--main-content-gutter)) 24px;
  padding: 0;
}
@media only screen and (min-width: 1216px) {
  .control-bar {
    padding: 0 var(--main-content-gutter);
    display: flex;
  }
}
.control-bar .filtering,
.control-bar .sorting {
  display: flex;
  flex-direction: column;
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering,
  .control-bar .sorting {
    flex-direction: row;
    flex-wrap: wrap;
  }
}
.control-bar .filtering > *,
.control-bar .sorting > * {
  border-bottom: 1px solid var(--bg-muted);
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 50%;
  }
}
@media only screen and (min-width: 1000px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 33.3%;
  }
}
@media only screen and (min-width: 1150px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 25%;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    border: 0;
  }
}
@media only screen and (min-width: 1400px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 0 1 200px;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering {
    flex: 1 1;
    align-self: flex-start;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > * {
    border-right: 1px solid var(--bg-muted);
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting {
    flex: 0 1;
    align-self: center;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting > * {
    border-left: 1px solid var(--bg-muted);
  }
}

.picker-with-search {
  --list-height: 320px;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
}
.picker-with-search .search {
  border-bottom: 1px solid var(--bg-muted);
  display: flex;
  align-items: center;
  padding: 0 0 0 24px;
}
.picker-with-search .search input {
  border: none;
  margin: 0;
  box-shadow: none;
}
.picker-with-search .search:focus-within .icon * {
  fill: var(--hub);
}
.picker-with-search ul.items {
  padding: 6px;
  margin: 0;
  list-style: none;
  font-size: 13px;
  max-height: var(--list-height);
  overflow: auto;
}
.picker-with-search ul.items label {
  line-height: 24px;
  text-transform: none;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding: 6px 18px;
  margin: 2px 0;
  border-radius: var(--radius);
  cursor: pointer;
}
.picker-with-search ul.items label:hover {
  background: var(--card-muted);
}
.picker-with-search ul.items label.selected {
  background: hsla(var(--hub-hsl), 0.1);
}
.picker-with-search ul.items label.selected .name,
.picker-with-search ul.items label.selected .meta {
  color: var(--hub);
}
.picker-with-search ul.items label.selected:hover {
  background: hsla(var(--hub-hsl), 0.15);
}
.picker-with-search ul.items label .checkbox {
  width: auto;
  padding: 0;
  margin: 0;
  flex: 0;
}
.picker-with-search ul.items label .checkbox[disabled] ~ .name {
  color: var(--text-muted);
}
.picker-with-search ul.items label .checkbox[disabled] ~ .meta {
  color: var(--text-light);
}
.picker-with-search ul.items label .icon {
  margin-left: 18px;
}
.picker-with-search ul.items label .name {
  margin: 0 24px 0 12px;
  flex: 1 1;
  color: var(--text);
  font-weight: 600;
}
.picker-with-search ul.items label .meta {
  font-weight: 400;
  color: var(--text-muted);
}

section.not-found {
  width: 100%;
  border: 2px dashed var(--bg-muted);
  padding: 48px 24px;
  text-align: center;
}
section.not-found .center {
  display: flex;
  flex-direction: column;
  align-items: center;
}
section.not-found h1 {
  font-size: 18px;
  line-height: 36px;
  margin: 0;
}
section.not-found p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
  margin: 12px auto 24px;
  max-width: 33rem;
}

.mat-datepicker-content {
  translate: -54px 6px;
}

ngxgeo-autocomplete #search_places {
  background: var(--card);
  border: 1px solid var(--bg-muted);
  padding: 14px 25px;
  outline: none;
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  background: var(--card) !important;
  border-radius: var(--radius);
  border: none !important;
  font-weight: 400;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown ul {
  padding: 0 7px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .currentlocation a {
  box-sizing: border-box;
  padding: 6px 24px !important;
  text-transform: capitalize;
  letter-spacing: 0;
  font-size: 13px !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  text-transform: none;
  padding: 6px 24px !important;
  box-sizing: border-box;
  line-height: 24px;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a:hover,
ngxgeo-autocomplete .custom-autocomplete__dropdown a:focus {
  background: var(--card-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .main-text {
  font-weight: 500 !important;
  font-size: 13px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .secondary_text {
  color: var(--text-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active {
  background-color: var(--card-muted) !important;
  color: var(--text-muted) !important;
  display: flex;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active a {
  background: transparent !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active .secondary_text {
  color: var(--text-muted) !important;
}

ngxgeo-autocomplete .heading {
  padding: 0 0 0 24px !important;
  box-sizing: border-box;
  overflow: hidden;
}
ngxgeo-autocomplete .heading .line-recent {
  left: 170px !important;
  top: 17px !important;
  width: calc(100% - 170px) !important;
}
ngxgeo-autocomplete .heading .line-location {
  left: 116px !important;
  top: 18px !important;
  width: calc(100% - 116px) !important;
}

ngxgeo-autocomplete
  .custom-autocomplete__dropdown
  .currentlocation
  .location-icon,
ngxgeo-autocomplete .custom-autocomplete__dropdown .custom-icon {
  display: none !important;
}

.debug-responsivity .size {
  position: fixed;
  bottom: 0;
  left: 0;
  z-index: 100;
  background: var(--text);
  color: var(--bg);
  font-size: 0.6em;
  font-weight: 600;
  padding: 0 3px;
  display: none;
}

.debug-responsivity .none {
  display: inline-block;
}

@media only screen and (min-width: 769px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .t {
    display: inline-block;
  }
}

@media only screen and (min-width: 1024px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .d {
    display: inline-block;
  }
}

@media only screen and (min-width: 1216px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .w {
    display: inline-block;
  }
}

@media only screen and (min-width: 1408px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .f {
    display: inline-block;
  }
}

.show-grid {
  background-image: linear-gradient(
    to bottom,
    #0ff 0px,
    rgba(255, 255, 255, 0) 1px
  );
  background-repeat: repeat-y;
  background-size: 100% 12px;
}

header.breadcrumb {
  padding: 36px 24px;
  margin: 0 calc(-1 * var(--main-content-gutter));
}
@media only screen and (min-width: 800px) {
  header.breadcrumb {
    padding: 48px var(--main-content-gutter) 24px;
    margin: 0 calc(-1 * var(--main-content-gutter));
  }
}
header.breadcrumb .row {
  display: flex;
  flex-direction: column;
}
@media only screen and (min-width: 800px) {
  header.breadcrumb .row {
    flex-direction: row;
  }
}
header.breadcrumb .page-title {
  flex: 1;
}
header.breadcrumb .page-title h1 {
  font-size: 28px;
  line-height: 36px;
  margin: 0;
}
header.breadcrumb .page-title .submenu {
  display: flex;
  align-items: center;
  font-size: 15px;
  line-height: 24px;
}
@media only screen and (min-width: 800px) {
  header.breadcrumb .page-title .submenu {
    line-height: 36px;
  }
}
header.breadcrumb .page-title .submenu a {
  color: var(--text-muted);
}
header.breadcrumb .page-title .submenu a:focus,
header.breadcrumb .page-title .submenu a:hover {
  color: var(--hub);
}
header.breadcrumb .page-title .submenu .item {
  margin: 0 12px 0 0;
}
header.breadcrumb .page-title .submenu .item.active {
  color: var(--hub);
}
header.breadcrumb .page-title .submenu .item::after {
  content: "->";
  margin-left: 12px;
}
header.breadcrumb .page-title .submenu .item:last-child::after {
  content: "";
}
header.breadcrumb .actions {
  display: flex;
  align-items: center;
  flex: auto;
  margin-top: 24px;
}
header.breadcrumb .actions > * {
  margin-right: 12px;
}
header.breadcrumb .actions > *:last-child {
  margin-right: 0;
}
@media only screen and (min-width: 800px) {
  header.breadcrumb .actions {
    justify-content: flex-end;
    margin-top: 0;
  }
}

/*
  Override SASS' handling of HSL(a) color functions, don't touch it and let CSS handle it itself.
  This will enable the trick with variable alpha channels for CSS color variables (see below).
*/
/*
  Function for defining (not only) vertical rhythm by multiplies of 12px
    Examples:
    width: size(2); (equals to "width: 24px;")
    line-height: size(3); (equals to "line-height: 36px;")
*/
/*
  Responsivity mixin for custom min-width styles
    Examples:
    @include break-from(450px) { ... }
*/
:root {
  --radius: 4px;
  --main-content-gutter: 24px;
}
@media only screen and (min-width: 769px) {
  :root {
    --main-content-gutter: 36px;
  }
}
@media only screen and (min-width: 1216px) {
  :root {
    --main-content-gutter: 48px;
  }
}

/*
  Usage:
  @extend %box-shadow;
*/
.control-bar {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.04), 0px 3px 4px rgba(0, 0, 0, 0.1);
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.24), 0px 3px 4px rgba(0, 0, 0, 0.2);
}

.button,
.button .icon,
.button .text,
label,
input,
textarea,
select,
.picker-with-search ul.items label,
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  transition: all 0.1s;
}

/*
  Self-hosted fonts
*/
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Regular.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Regular.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Medium.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Medium.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 600;
  font-display: swap;
  src: url("/fonts/Inter/Inter-SemiBold.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-SemiBold.woff?v=3.18") format("woff");
}

/* -------------------------------------------------------
Variable font.
Usage:

  body {
    font-family: 'Inter', sans-serif; // use regular Inter font by default..
    @supports (font-variation-settings: normal) {
      font-family: 'Inter var', sans-serif; // ..but if supported, use variable Inter font instead (all-in-one)
    }
  }

*/
@font-face {
  font-family: "Inter var";
  font-weight: 100 900;
  font-display: swap;
  font-style: normal;
  font-named-instance: "Regular";
  src: url("/fonts/Inter/Inter-roman.var.woff2?v=3.18") format("woff2");
}

html {
  box-sizing: border-box;
}

body {
  box-sizing: border-box;
  background: var(--bg);
  margin: 0;
  padding: 0;
  font-family: "Inter", sans-serif;
}
@supports (font-variation-settings: normal) {
  body {
    font-family: "Inter var", sans-serif;
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 600;
  color: var(--text);
}

p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
}

b,
strong {
  font-weight: 500;
}

a {
  text-decoration: none;
}

hr {
  border: none;
  border-top: 1px solid var(--bg-muted);
  margin: 24px 0;
}
.--padded hr {
  margin: 24px -24px;
}
hr.--thick {
  border-width: 3px;
}

.block .block-header .icon {
  opacity: 0.4;
}

.block .block-header h1 {
  line-height: 36px;
  font-size: 16px;
  margin: 0 0 0 12px;
}

.block .body .--padded {
  padding: 24px 24px;
  display: block;
}

/*
  ----- BUTTONS -----

  a) <ButtonField text="xxx" action="xxx" type="neutral"></ButtonField>
  b) <input type="submit" class="input alert button" value="xxx">
  c) <a class="neutral button"><span class="text">xxx</span></a>
*/
.button {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 36px;
  background: var(--hub);
  border: 0;
  border-bottom: 2px solid var(--hub-darker);
  border-radius: var(--radius);
  cursor: pointer;
  outline: none;
  padding: 0 15px;
  color: var(--bg-white);
  font-weight: 600;
  font-size: 14px;
}
.button .icon {
  display: flex;
  opacity: 0.5;
  position: relative;
}
.button .icon + .text {
  margin-left: 10px;
}
.button .text {
  color: var(--card);
  position: relative;
}
.button.active {
  box-shadow: 0 3px 1px hsla(var(--text-hsl), 0.4) inset;
}
.button:hover,
.button.active {
  background: var(--hub-darker);
  text-decoration: none;
}
.button:hover .icon,
.button.active .icon {
  top: 1px;
}
.button:hover .text,
.button.active .text {
  top: 1px;
}
.button:hover.input,
.button.active.input {
  padding-top: 2px;
}
.button:focus {
  box-shadow: 0 0 0 4px hsla(var(--hub-hsl), 0.25);
}
.button.input {
  width: auto;
}
.button.success {
  background: var(--success);
  border-color: var(--success-darker);
}
.button.success:hover,
.button.success.active {
  background: var(--success-darker);
}
.button.success:focus {
  box-shadow: 0 0 0 4px hsla(var(--success-darker-hsl), 0.25);
}
.button.alert {
  background: var(--alert);
  border-color: var(--alert-darker);
}
.button.alert:hover,
.button.alert.active {
  background: var(--alert-darker);
}
.button.alert:focus {
  box-shadow: 0 0 0 4px hsla(var(--alert-darker-hsl), 0.25);
}
.button.neutral {
  --neutral-darker: hsl(0, 3%, 48%);
  --neutral-darker-hsl: 0, 3%, 48%;
  background: var(--text-light);
  border-color: var(--neutral-darker);
}
.button.neutral.active {
  background: var(--neutral-darker);
}
.button.neutral:hover {
  background: var(--neutral-darker);
  box-shadow: none;
}
.button.neutral:focus {
  box-shadow: 0 0 0 4px hsla(var(--neutral-darker-hsl), 0.25);
}
.button.outlined {
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  background: transparent;
  font-weight: 500;
  font-size: 14px;
  color: var(--text-muted);
  line-height: 36px;
  display: flex;
  height: 36px;
  padding: 0 11px;
}
.button.outlined .text {
  color: var(--text-muted);
}
.button.outlined.active {
  box-shadow: none;
  background: hsla(var(--text-light-hsl), 0.2);
}
.button.outlined:hover,
.button.outlined.active {
  border-color: var(--text-light);
}
.button.outlined:hover .icon,
.button.outlined.active .icon {
  top: 0;
}
.button.outlined:hover .text,
.button.outlined.active .text {
  top: 0;
}
.button.outlined:focus {
  box-shadow: 0 0 0 4px hsla(var(--bg-muted-hsl), 0.5);
}
.button.transparent {
  opacity: 0.3;
}

/*
  ----- FORMS -----

  <label>
    Label title
    <input type="text">
  </label>
*/
label {
  font-size: 12px;
  line-height: 36px;
  color: var(--text-light);
  text-transform: uppercase;
  cursor: pointer;
}
label:hover {
  color: var(--text-muted);
}
label:focus-within {
  color: var(--hub);
  font-weight: 560;
}
label.toggle-button {
  display: flex;
  text-transform: none;
  line-height: 24px;
  margin: 12px 0;
}
label.toggle-button:focus-within {
  font-weight: inherit;
}
label.toggle-button SliderField {
  flex: auto;
  margin: 4px 18px 0 0;
}
label.toggle-button .text {
  flex: 1 1 100%;
  color: var(--text-muted);
}
label.toggle-button .text strong {
  font-size: 15px;
  color: var(--text);
  display: block;
}
label.toggle-button .text small {
  font-size: 13px;
}

input,
textarea,
select {
  box-sizing: border-box;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  outline: none;
  width: 100%;
  padding: 12px 24px;
  margin-bottom: 12px;
  font-size: 15px;
  color: var(--text);
  line-height: 24px;
}
input[type="checkbox"],
textarea[type="checkbox"],
select[type="checkbox"] {
  width: auto;
}
input:not(.button)[disabled],
input:not(.button)[readonly],
textarea:not(.button)[disabled],
textarea:not(.button)[readonly],
select:not(.button)[disabled],
select:not(.button)[readonly] {
  color: var(--text-muted);
}
input:not(.button):hover,
textarea:not(.button):hover,
select:not(.button):hover {
  border: 1px solid var(--text-light);
}
input:not(.button):focus,
textarea:not(.button):focus,
select:not(.button):focus {
  border: 1px solid var(--hub);
  box-shadow: 0px 0px 0px 3px hsla(var(--hub-hsl), 0.2);
}

.table-header {
  font-size: 12px;
  line-height: 24px;
  color: var(--text-light);
  text-transform: uppercase;
}

.howto-link:hover,
.howto-link:focus {
  text-decoration: underline;
}

.howto-link::after {
  content: " ->";
}

.grid-container {
  --columns: 1;
  --gapH: 12px;
  --gapV: 0;
  display: grid;
  column-gap: var(--gapH);
  row-gap: var(--gapV);
  grid-template-columns: repeat(var(--columns), 1fr);
}
@media only screen and (min-width: 769px) {
  .grid-container {
    --gapH: 24px;
  }
}
.grid-container.--two-columns {
  --gapH: 24px;
}
@media only screen and (min-width: 1216px) {
  .grid-container.--two-columns {
    --columns: 2;
  }
}
@media only screen and (min-width: 769px) {
  .grid-container.--four-columns {
    --columns: 2;
    --gapV: 24px;
  }
}
@media only screen and (min-width: 1216px) {
  .grid-container.--four-columns {
    --columns: 4;
  }
}

.control-bar {
  background-color: var(--card-muted);
  margin: 0 calc(-1 * var(--main-content-gutter)) 24px;
  padding: 0;
}
@media only screen and (min-width: 1216px) {
  .control-bar {
    padding: 0 var(--main-content-gutter);
    display: flex;
  }
}
.control-bar .filtering,
.control-bar .sorting {
  display: flex;
  flex-direction: column;
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering,
  .control-bar .sorting {
    flex-direction: row;
    flex-wrap: wrap;
  }
}
.control-bar .filtering > *,
.control-bar .sorting > * {
  border-bottom: 1px solid var(--bg-muted);
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 50%;
  }
}
@media only screen and (min-width: 1000px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 33.3%;
  }
}
@media only screen and (min-width: 1150px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 25%;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    border: 0;
  }
}
@media only screen and (min-width: 1400px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 0 1 200px;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering {
    flex: 1 1;
    align-self: flex-start;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > * {
    border-right: 1px solid var(--bg-muted);
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting {
    flex: 0 1;
    align-self: center;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting > * {
    border-left: 1px solid var(--bg-muted);
  }
}

.picker-with-search {
  --list-height: 320px;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
}
.picker-with-search .search {
  border-bottom: 1px solid var(--bg-muted);
  display: flex;
  align-items: center;
  padding: 0 0 0 24px;
}
.picker-with-search .search input {
  border: none;
  margin: 0;
  box-shadow: none;
}
.picker-with-search .search:focus-within .icon * {
  fill: var(--hub);
}
.picker-with-search ul.items {
  padding: 6px;
  margin: 0;
  list-style: none;
  font-size: 13px;
  max-height: var(--list-height);
  overflow: auto;
}
.picker-with-search ul.items label {
  line-height: 24px;
  text-transform: none;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding: 6px 18px;
  margin: 2px 0;
  border-radius: var(--radius);
  cursor: pointer;
}
.picker-with-search ul.items label:hover {
  background: var(--card-muted);
}
.picker-with-search ul.items label.selected {
  background: hsla(var(--hub-hsl), 0.1);
}
.picker-with-search ul.items label.selected .name,
.picker-with-search ul.items label.selected .meta {
  color: var(--hub);
}
.picker-with-search ul.items label.selected:hover {
  background: hsla(var(--hub-hsl), 0.15);
}
.picker-with-search ul.items label .checkbox {
  width: auto;
  padding: 0;
  margin: 0;
  flex: 0;
}
.picker-with-search ul.items label .checkbox[disabled] ~ .name {
  color: var(--text-muted);
}
.picker-with-search ul.items label .checkbox[disabled] ~ .meta {
  color: var(--text-light);
}
.picker-with-search ul.items label .icon {
  margin-left: 18px;
}
.picker-with-search ul.items label .name {
  margin: 0 24px 0 12px;
  flex: 1 1;
  color: var(--text);
  font-weight: 600;
}
.picker-with-search ul.items label .meta {
  font-weight: 400;
  color: var(--text-muted);
}

section.not-found {
  width: 100%;
  border: 2px dashed var(--bg-muted);
  padding: 48px 24px;
  text-align: center;
}
section.not-found .center {
  display: flex;
  flex-direction: column;
  align-items: center;
}
section.not-found h1 {
  font-size: 18px;
  line-height: 36px;
  margin: 0;
}
section.not-found p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
  margin: 12px auto 24px;
  max-width: 33rem;
}

.mat-datepicker-content {
  translate: -54px 6px;
}

ngxgeo-autocomplete #search_places {
  background: var(--card);
  border: 1px solid var(--bg-muted);
  padding: 14px 25px;
  outline: none;
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  background: var(--card) !important;
  border-radius: var(--radius);
  border: none !important;
  font-weight: 400;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown ul {
  padding: 0 7px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .currentlocation a {
  box-sizing: border-box;
  padding: 6px 24px !important;
  text-transform: capitalize;
  letter-spacing: 0;
  font-size: 13px !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  text-transform: none;
  padding: 6px 24px !important;
  box-sizing: border-box;
  line-height: 24px;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a:hover,
ngxgeo-autocomplete .custom-autocomplete__dropdown a:focus {
  background: var(--card-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .main-text {
  font-weight: 500 !important;
  font-size: 13px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .secondary_text {
  color: var(--text-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active {
  background-color: var(--card-muted) !important;
  color: var(--text-muted) !important;
  display: flex;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active a {
  background: transparent !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active .secondary_text {
  color: var(--text-muted) !important;
}

ngxgeo-autocomplete .heading {
  padding: 0 0 0 24px !important;
  box-sizing: border-box;
  overflow: hidden;
}
ngxgeo-autocomplete .heading .line-recent {
  left: 170px !important;
  top: 17px !important;
  width: calc(100% - 170px) !important;
}
ngxgeo-autocomplete .heading .line-location {
  left: 116px !important;
  top: 18px !important;
  width: calc(100% - 116px) !important;
}

ngxgeo-autocomplete
  .custom-autocomplete__dropdown
  .currentlocation
  .location-icon,
ngxgeo-autocomplete .custom-autocomplete__dropdown .custom-icon {
  display: none !important;
}

.debug-responsivity .size {
  position: fixed;
  bottom: 0;
  left: 0;
  z-index: 100;
  background: var(--text);
  color: var(--bg);
  font-size: 0.6em;
  font-weight: 600;
  padding: 0 3px;
  display: none;
}

.debug-responsivity .none {
  display: inline-block;
}

@media only screen and (min-width: 769px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .t {
    display: inline-block;
  }
}

@media only screen and (min-width: 1024px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .d {
    display: inline-block;
  }
}

@media only screen and (min-width: 1216px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .w {
    display: inline-block;
  }
}

@media only screen and (min-width: 1408px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .f {
    display: inline-block;
  }
}

.show-grid {
  background-image: linear-gradient(
    to bottom,
    #0ff 0px,
    rgba(255, 255, 255, 0) 1px
  );
  background-repeat: repeat-y;
  background-size: 100% 12px;
}

.kpi div.card {
  height: 180px;
  background: var(--bg-white);
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.04), 0px 3px 4px rgba(0, 0, 0, 0.1);
  border-radius: 4px;
  display: flex;
  flex-direction: column;
}
.kpi div.card div.title {
  font-size: 46px;
  text-align: center;
  color: var(--text-muted);
  display: flex;
  flex-direction: column;
  flex: 0.7;
  justify-content: center;
  align-items: center;
  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.07);
  z-index: 1;
}
.kpi div.card div.title .number-divider span {
  color: var(--text-light);
  font-size: 28px;
}
.kpi div.card div.title .progress {
  font-size: 15px;
  color: var(--text-light);
}
.kpi div.card div.title .progress span.green {
  color: var(--success);
}
.kpi div.card div.title .progress span.red {
  color: var(--alert);
}
.kpi div.card div.footer {
  background-color: #fbfbfb;
  flex: 0.3;
  display: flex;
  align-items: center;
  width: 100%;
  align-self: center;
  justify-content: center;
  font-size: 14px;
  line-height: 24px;
  color: var(--text);
}
.kpi div.card div.footer div.bullet {
  display: table;
  width: 4px;
  height: 4px;
}

.kpi div.card.is-loading .footer {
  background: #eee;
  background: linear-gradient(110deg, #ececec 8%, #f5f5f5 18%, #ececec 33%);
  border-radius: 5px;
  background-size: 200% 100%;
  animation: 1.5s shine linear infinite;
}

@keyframes shine {
  to {
    background-position-x: -200%;
  }
}

/*
  Override SASS' handling of HSL(a) color functions, don't touch it and let CSS handle it itself.
  This will enable the trick with variable alpha channels for CSS color variables (see below).
*/
/*
  Function for defining (not only) vertical rhythm by multiplies of 12px
    Examples:
    width: size(2); (equals to "width: 24px;")
    line-height: size(3); (equals to "line-height: 36px;")
*/
/*
  Responsivity mixin for custom min-width styles
    Examples:
    @include break-from(450px) { ... }
*/
:root {
  --radius: 4px;
  --main-content-gutter: 24px;
}
@media only screen and (min-width: 769px) {
  :root {
    --main-content-gutter: 36px;
  }
}
@media only screen and (min-width: 1216px) {
  :root {
    --main-content-gutter: 48px;
  }
}

/*
  Usage:
  @extend %box-shadow;
*/
.control-bar {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.04), 0px 3px 4px rgba(0, 0, 0, 0.1);
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  box-shadow: 0px 4px 34px rgba(0, 0, 0, 0.24), 0px 3px 4px rgba(0, 0, 0, 0.2);
}

.button,
.button .icon,
.button .text,
label,
input,
textarea,
select,
.picker-with-search ul.items label,
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  transition: all 0.1s;
}

/*
  Self-hosted fonts
*/
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Regular.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Regular.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url("/fonts/Inter/Inter-Medium.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-Medium.woff?v=3.18") format("woff");
}

@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 600;
  font-display: swap;
  src: url("/fonts/Inter/Inter-SemiBold.woff2?v=3.18") format("woff2"),
    url("/fonts/Inter/Inter-SemiBold.woff?v=3.18") format("woff");
}

/* -------------------------------------------------------
Variable font.
Usage:

  body {
    font-family: 'Inter', sans-serif; // use regular Inter font by default..
    @supports (font-variation-settings: normal) {
      font-family: 'Inter var', sans-serif; // ..but if supported, use variable Inter font instead (all-in-one)
    }
  }

*/
@font-face {
  font-family: "Inter var";
  font-weight: 100 900;
  font-display: swap;
  font-style: normal;
  font-named-instance: "Regular";
  src: url("/fonts/Inter/Inter-roman.var.woff2?v=3.18") format("woff2");
}

html {
  box-sizing: border-box;
}

body {
  box-sizing: border-box;
  background: var(--bg);
  margin: 0;
  padding: 0;
  font-family: "Inter", sans-serif;
}
@supports (font-variation-settings: normal) {
  body {
    font-family: "Inter var", sans-serif;
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 600;
  color: var(--text);
}

p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
}

b,
strong {
  font-weight: 500;
}

a {
  text-decoration: none;
}

hr {
  border: none;
  border-top: 1px solid var(--bg-muted);
  margin: 24px 0;
}
.--padded hr {
  margin: 24px -24px;
}
hr.--thick {
  border-width: 3px;
}

.block .block-header .icon {
  opacity: 0.4;
}

.block .block-header h1 {
  line-height: 36px;
  font-size: 16px;
  margin: 0 0 0 12px;
}

.block .body .--padded {
  padding: 24px 24px;
  display: block;
}

/*
  ----- BUTTONS -----

  a) <ButtonField text="xxx" action="xxx" type="neutral"></ButtonField>
  b) <input type="submit" class="input alert button" value="xxx">
  c) <a class="neutral button"><span class="text">xxx</span></a>
*/
.button {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 36px;
  background: var(--hub);
  border: 0;
  border-bottom: 2px solid var(--hub-darker);
  border-radius: var(--radius);
  cursor: pointer;
  outline: none;
  padding: 0 15px;
  color: var(--bg-white);
  font-weight: 600;
  font-size: 14px;
}
.button .icon {
  display: flex;
  opacity: 0.5;
  position: relative;
}
.button .icon + .text {
  margin-left: 10px;
}
.button .text {
  color: var(--card);
  position: relative;
}
.button.active {
  box-shadow: 0 3px 1px hsla(var(--text-hsl), 0.4) inset;
}
.button:hover,
.button.active {
  background: var(--hub-darker);
  text-decoration: none;
}
.button:hover .icon,
.button.active .icon {
  top: 1px;
}
.button:hover .text,
.button.active .text {
  top: 1px;
}
.button:hover.input,
.button.active.input {
  padding-top: 2px;
}
.button:focus {
  box-shadow: 0 0 0 4px hsla(var(--hub-hsl), 0.25);
}
.button.input {
  width: auto;
}
.button.success {
  background: var(--success);
  border-color: var(--success-darker);
}
.button.success:hover,
.button.success.active {
  background: var(--success-darker);
}
.button.success:focus {
  box-shadow: 0 0 0 4px hsla(var(--success-darker-hsl), 0.25);
}
.button.alert {
  background: var(--alert);
  border-color: var(--alert-darker);
}
.button.alert:hover,
.button.alert.active {
  background: var(--alert-darker);
}
.button.alert:focus {
  box-shadow: 0 0 0 4px hsla(var(--alert-darker-hsl), 0.25);
}
.button.neutral {
  --neutral-darker: hsl(0, 3%, 48%);
  --neutral-darker-hsl: 0, 3%, 48%;
  background: var(--text-light);
  border-color: var(--neutral-darker);
}
.button.neutral.active {
  background: var(--neutral-darker);
}
.button.neutral:hover {
  background: var(--neutral-darker);
  box-shadow: none;
}
.button.neutral:focus {
  box-shadow: 0 0 0 4px hsla(var(--neutral-darker-hsl), 0.25);
}
.button.outlined {
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  background: transparent;
  font-weight: 500;
  font-size: 14px;
  color: var(--text-muted);
  line-height: 36px;
  display: flex;
  height: 36px;
  padding: 0 11px;
}
.button.outlined .text {
  color: var(--text-muted);
}
.button.outlined.active {
  box-shadow: none;
  background: hsla(var(--text-light-hsl), 0.2);
}
.button.outlined:hover,
.button.outlined.active {
  border-color: var(--text-light);
}
.button.outlined:hover .icon,
.button.outlined.active .icon {
  top: 0;
}
.button.outlined:hover .text,
.button.outlined.active .text {
  top: 0;
}
.button.outlined:focus {
  box-shadow: 0 0 0 4px hsla(var(--bg-muted-hsl), 0.5);
}
.button.transparent {
  opacity: 0.3;
}

/*
  ----- FORMS -----

  <label>
    Label title
    <input type="text">
  </label>
*/
label {
  font-size: 12px;
  line-height: 36px;
  color: var(--text-light);
  text-transform: uppercase;
  cursor: pointer;
}
label:hover {
  color: var(--text-muted);
}
label:focus-within {
  color: var(--hub);
  font-weight: 560;
}
label.toggle-button {
  display: flex;
  text-transform: none;
  line-height: 24px;
  margin: 12px 0;
}
label.toggle-button:focus-within {
  font-weight: inherit;
}
label.toggle-button SliderField {
  flex: auto;
  margin: 4px 18px 0 0;
}
label.toggle-button .text {
  flex: 1 1 100%;
  color: var(--text-muted);
}
label.toggle-button .text strong {
  font-size: 15px;
  color: var(--text);
  display: block;
}
label.toggle-button .text small {
  font-size: 13px;
}

input,
textarea,
select {
  box-sizing: border-box;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  outline: none;
  width: 100%;
  padding: 12px 24px;
  margin-bottom: 12px;
  font-size: 15px;
  color: var(--text);
  line-height: 24px;
}
input[type="checkbox"],
textarea[type="checkbox"],
select[type="checkbox"] {
  width: auto;
}
input:not(.button)[disabled],
input:not(.button)[readonly],
textarea:not(.button)[disabled],
textarea:not(.button)[readonly],
select:not(.button)[disabled],
select:not(.button)[readonly] {
  color: var(--text-muted);
}
input:not(.button):hover,
textarea:not(.button):hover,
select:not(.button):hover {
  border: 1px solid var(--text-light);
}
input:not(.button):focus,
textarea:not(.button):focus,
select:not(.button):focus {
  border: 1px solid var(--hub);
  box-shadow: 0px 0px 0px 3px hsla(var(--hub-hsl), 0.2);
}

.table-header {
  font-size: 12px;
  line-height: 24px;
  color: var(--text-light);
  text-transform: uppercase;
}

.howto-link:hover,
.howto-link:focus {
  text-decoration: underline;
}

.howto-link::after {
  content: " ->";
}

.grid-container {
  --columns: 1;
  --gapH: 12px;
  --gapV: 0;
  display: grid;
  column-gap: var(--gapH);
  row-gap: var(--gapV);
  grid-template-columns: repeat(var(--columns), 1fr);
}
@media only screen and (min-width: 769px) {
  .grid-container {
    --gapH: 24px;
  }
}
.grid-container.--two-columns {
  --gapH: 24px;
}
@media only screen and (min-width: 1216px) {
  .grid-container.--two-columns {
    --columns: 2;
  }
}
@media only screen and (min-width: 769px) {
  .grid-container.--four-columns {
    --columns: 2;
    --gapV: 24px;
  }
}
@media only screen and (min-width: 1216px) {
  .grid-container.--four-columns {
    --columns: 4;
  }
}

.control-bar {
  background-color: var(--card-muted);
  margin: 0 calc(-1 * var(--main-content-gutter)) 24px;
  padding: 0;
}
@media only screen and (min-width: 1216px) {
  .control-bar {
    padding: 0 var(--main-content-gutter);
    display: flex;
  }
}
.control-bar .filtering,
.control-bar .sorting {
  display: flex;
  flex-direction: column;
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering,
  .control-bar .sorting {
    flex-direction: row;
    flex-wrap: wrap;
  }
}
.control-bar .filtering > *,
.control-bar .sorting > * {
  border-bottom: 1px solid var(--bg-muted);
}
@media only screen and (min-width: 500px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 50%;
  }
}
@media only screen and (min-width: 1000px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 33.3%;
  }
}
@media only screen and (min-width: 1150px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 1 1 25%;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    border: 0;
  }
}
@media only screen and (min-width: 1400px) {
  .control-bar .filtering > *,
  .control-bar .sorting > * {
    flex: 0 1 200px;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering {
    flex: 1 1;
    align-self: flex-start;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .filtering > * {
    border-right: 1px solid var(--bg-muted);
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting {
    flex: 0 1;
    align-self: center;
  }
}
@media only screen and (min-width: 1216px) {
  .control-bar .sorting > * {
    border-left: 1px solid var(--bg-muted);
  }
}

.picker-with-search {
  --list-height: 320px;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
}
.picker-with-search .search {
  border-bottom: 1px solid var(--bg-muted);
  display: flex;
  align-items: center;
  padding: 0 0 0 24px;
}
.picker-with-search .search input {
  border: none;
  margin: 0;
  box-shadow: none;
}
.picker-with-search .search:focus-within .icon * {
  fill: var(--hub);
}
.picker-with-search ul.items {
  padding: 6px;
  margin: 0;
  list-style: none;
  font-size: 13px;
  max-height: var(--list-height);
  overflow: auto;
}
.picker-with-search ul.items label {
  line-height: 24px;
  text-transform: none;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding: 6px 18px;
  margin: 2px 0;
  border-radius: var(--radius);
  cursor: pointer;
}
.picker-with-search ul.items label:hover {
  background: var(--card-muted);
}
.picker-with-search ul.items label.selected {
  background: hsla(var(--hub-hsl), 0.1);
}
.picker-with-search ul.items label.selected .name,
.picker-with-search ul.items label.selected .meta {
  color: var(--hub);
}
.picker-with-search ul.items label.selected:hover {
  background: hsla(var(--hub-hsl), 0.15);
}
.picker-with-search ul.items label .checkbox {
  width: auto;
  padding: 0;
  margin: 0;
  flex: 0;
}
.picker-with-search ul.items label .checkbox[disabled] ~ .name {
  color: var(--text-muted);
}
.picker-with-search ul.items label .checkbox[disabled] ~ .meta {
  color: var(--text-light);
}
.picker-with-search ul.items label .icon {
  margin-left: 18px;
}
.picker-with-search ul.items label .name {
  margin: 0 24px 0 12px;
  flex: 1 1;
  color: var(--text);
  font-weight: 600;
}
.picker-with-search ul.items label .meta {
  font-weight: 400;
  color: var(--text-muted);
}

section.not-found {
  width: 100%;
  border: 2px dashed var(--bg-muted);
  padding: 48px 24px;
  text-align: center;
}
section.not-found .center {
  display: flex;
  flex-direction: column;
  align-items: center;
}
section.not-found h1 {
  font-size: 18px;
  line-height: 36px;
  margin: 0;
}
section.not-found p {
  font-size: 15px;
  line-height: 24px;
  color: var(--text-muted);
  margin: 12px auto 24px;
  max-width: 33rem;
}

.mat-datepicker-content {
  translate: -54px 6px;
}

ngxgeo-autocomplete #search_places {
  background: var(--card);
  border: 1px solid var(--bg-muted);
  padding: 14px 25px;
  outline: none;
}

ngxgeo-autocomplete .custom-autocomplete__dropdown {
  background: var(--card) !important;
  border-radius: var(--radius);
  border: none !important;
  font-weight: 400;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown ul {
  padding: 0 7px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .currentlocation a {
  box-sizing: border-box;
  padding: 6px 24px !important;
  text-transform: capitalize;
  letter-spacing: 0;
  font-size: 13px !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a {
  text-transform: none;
  padding: 6px 24px !important;
  box-sizing: border-box;
  line-height: 24px;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown a:hover,
ngxgeo-autocomplete .custom-autocomplete__dropdown a:focus {
  background: var(--card-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .main-text {
  font-weight: 500 !important;
  font-size: 13px;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .secondary_text {
  color: var(--text-muted);
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active {
  background-color: var(--card-muted) !important;
  color: var(--text-muted) !important;
  display: flex;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active a {
  background: transparent !important;
}
ngxgeo-autocomplete .custom-autocomplete__dropdown .active .secondary_text {
  color: var(--text-muted) !important;
}

ngxgeo-autocomplete .heading {
  padding: 0 0 0 24px !important;
  box-sizing: border-box;
  overflow: hidden;
}
ngxgeo-autocomplete .heading .line-recent {
  left: 170px !important;
  top: 17px !important;
  width: calc(100% - 170px) !important;
}
ngxgeo-autocomplete .heading .line-location {
  left: 116px !important;
  top: 18px !important;
  width: calc(100% - 116px) !important;
}

ngxgeo-autocomplete
  .custom-autocomplete__dropdown
  .currentlocation
  .location-icon,
ngxgeo-autocomplete .custom-autocomplete__dropdown .custom-icon {
  display: none !important;
}

.debug-responsivity .size {
  position: fixed;
  bottom: 0;
  left: 0;
  z-index: 100;
  background: var(--text);
  color: var(--bg);
  font-size: 0.6em;
  font-weight: 600;
  padding: 0 3px;
  display: none;
}

.debug-responsivity .none {
  display: inline-block;
}

@media only screen and (min-width: 769px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .t {
    display: inline-block;
  }
}

@media only screen and (min-width: 1024px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .d {
    display: inline-block;
  }
}

@media only screen and (min-width: 1216px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .w {
    display: inline-block;
  }
}

@media only screen and (min-width: 1408px) {
  .debug-responsivity .size {
    display: none;
  }
  .debug-responsivity .f {
    display: inline-block;
  }
}

.show-grid {
  background-image: linear-gradient(
    to bottom,
    #0ff 0px,
    rgba(255, 255, 255, 0) 1px
  );
  background-repeat: repeat-y;
  background-size: 100% 12px;
}

div.gradient {
  height: 6px;
  width: 100%;
  background: var(--upper-gradient);
  box-shadow: none;
}
